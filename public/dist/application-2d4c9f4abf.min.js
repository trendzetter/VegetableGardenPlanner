!function(window){"use strict";function registerModule(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}var applicationModuleName="mean",service={applicationEnvironment:window.env,applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.bootstrap.contextMenu","angularFileUpload","dragon-drop","ngCropper","ngFileUpload","ngCookies","pascalprecht.translate","ui-notification"],registerModule:registerModule};window.ApplicationConfiguration=service,angular.module("ui-notification").config(["NotificationProvider",function(NotificationProvider){NotificationProvider.setOptions({delay:2e3,startTop:20,startRight:10,verticalSpacing:20,horizontalSpacing:20,positionX:"right",positionY:"bottom"})}])}(window);
!function(app){"use strict";function bootstrapConfig($compileProvider,$locationProvider,$httpProvider,$logProvider,$translateProvider){$translateProvider.useStaticFilesLoader({prefix:"/i18n/",suffix:".json"}),$translateProvider.useLocalStorage(),$translateProvider.preferredLanguage("en"),$translateProvider.useSanitizeValueStrategy("escape"),$locationProvider.html5Mode({enabled:!0,requireBase:!1}).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor"),$compileProvider.debugInfoEnabled("production"!==app.applicationEnvironment),$logProvider.debugEnabled("production"!==app.applicationEnvironment)}function init(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[app.applicationModuleName])}angular.module(app.applicationModuleName,app.applicationModuleVendorDependencies),angular.module(app.applicationModuleName).config(bootstrapConfig),bootstrapConfig.$inject=["$compileProvider","$locationProvider","$httpProvider","$logProvider","$translateProvider"],angular.element(document).ready(init)}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("articles",["core"]),app.registerModule("articles.admin",["core.admin"]),app.registerModule("articles.admin.routes",["core.admin.routes"]),app.registerModule("articles.services"),app.registerModule("articles.routes",["ui.router","core.routes","articles.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("chat",["core"]),app.registerModule("chat.routes",["ui.router","core.routes"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("core"),app.registerModule("core.routes",["ui.router"]),app.registerModule("core.admin",["core"]),app.registerModule("core.admin.routes",["ui.router"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("crops"),app.registerModule("crops.services"),app.registerModule("crops.routes",["ui.router","crops.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("friends",["core"]),app.registerModule("friends.admin",["core.admin"]),app.registerModule("friends.admin.routes",["core.admin.routes"]),app.registerModule("friends.services"),app.registerModule("friends.routes",["ui.router","core.routes","friends.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("cultivation-plans",["core"]),app.registerModule("cultivation-plans.services"),app.registerModule("cultivation-plans.routes",["ui.router","core.routes","cultivation-plans.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("gardenparts"),app.registerModule("gardenparts.services"),app.registerModule("gardenparts.routes",["ui.router","gardenparts.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("gardens"),app.registerModule("gardens.services"),app.registerModule("gardens.routes",["ui.router","gardens.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("harvests"),app.registerModule("harvests.services"),app.registerModule("harvests.routes",["ui.router","harvests.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("messages",["core"]),app.registerModule("messages.admin",["core.admin"]),app.registerModule("messages.admin.routes",["core.admin.routes"]),app.registerModule("messages.services"),app.registerModule("messages.routes",["ui.router","core.routes","messages.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("plantfamilies"),app.registerModule("plantfamilies.services"),app.registerModule("plantfamilies.routes",["ui.router","plantfamilies.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("plant-varieties"),app.registerModule("plant-varieties.services"),app.registerModule("plant-varieties.routes",["ui.router","plant-varieties.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("rule-sets"),app.registerModule("rule-sets.services"),app.registerModule("rule-sets.routes",["ui.router","rule-sets.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("tasks",["core"]),app.registerModule("tasks.admin",["core.admin"]),app.registerModule("tasks.admin.routes",["core.admin.routes"]),app.registerModule("tasks.services"),app.registerModule("tasks.routes",["ui.router","core.routes","tasks.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("users"),app.registerModule("users.admin"),app.registerModule("users.admin.routes",["ui.router","core.routes","users.admin.services"]),app.registerModule("users.admin.services"),app.registerModule("users.routes",["ui.router","core.routes"]),app.registerModule("users.services")}(ApplicationConfiguration);
!function(){"use strict";function ArticlesController($scope,article,Authentication){var vm=this;vm.article=article,vm.authentication=Authentication}angular.module("articles").controller("ArticlesController",ArticlesController),ArticlesController.$inject=["$scope","articleResolve","Authentication"]}();
!function(){"use strict";function ArticlesListController(ArticlesService){var vm=this;vm.articles=ArticlesService.query()}angular.module("articles").controller("ArticlesListController",ArticlesListController),ArticlesListController.$inject=["ArticlesService"]}();
!function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Articles",state:"admin.articles.list"})}angular.module("articles.admin").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.articles.list",{url:"",templateUrl:"/modules/articles/client/views/admin/list-articles.client.view.html",controller:"ArticlesAdminListController",controllerAs:"vm",data:{roles:["admin"]}}).state("admin.articles.create",{url:"/create",templateUrl:"/modules/articles/client/views/admin/form-article.client.view.html",controller:"ArticlesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{articleResolve:newArticle}}).state("admin.articles.edit",{url:"/:articleId/edit",templateUrl:"/modules/articles/client/views/admin/form-article.client.view.html",controller:"ArticlesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{articleResolve:getArticle}})}function getArticle($stateParams,ArticlesService){return ArticlesService.get({articleId:$stateParams.articleId}).$promise}function newArticle(ArticlesService){return new ArticlesService}angular.module("articles.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getArticle.$inject=["$stateParams","ArticlesService"],newArticle.$inject=["ArticlesService"]}();

!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("articles",{abstract:!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"/modules/articles/client/views/list-articles.client.view.html",controller:"ArticlesListController",controllerAs:"vm",data:{pageTitle:"Articles List"}}).state("articles.view",{url:"/:articleId",templateUrl:"/modules/articles/client/views/view-article.client.view.html",controller:"ArticlesController",controllerAs:"vm",resolve:{articleResolve:getArticle},data:{pageTitle:"Article {{ articleResolve.title }}"}})}function getArticle($stateParams,ArticlesService){return ArticlesService.get({articleId:$stateParams.articleId}).$promise}angular.module("articles.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getArticle.$inject=["$stateParams","ArticlesService"]}();
!function(){"use strict";function ArticlesService($resource,$log){function createOrUpdate(article){function onSuccess(article){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return article._id?article.$update(onSuccess,onError):article.$save(onSuccess,onError)}function handleError(error){$log.error(error)}var Article=$resource("/api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}});return angular.extend(Article.prototype,{createOrUpdate:function(){var article=this;return createOrUpdate(article)}}),Article}angular.module("articles.services").factory("ArticlesService",ArticlesService),ArticlesService.$inject=["$resource","$log"]}();
!function(){"use strict";function menuConfig(menuService){}angular.module("chat").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"/modules/chat/client/views/chat.client.view.html",controller:"ChatController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Chat"}})}angular.module("chat.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function ChatController($scope,$state,Authentication,Socket){function init(){Authentication.user||$state.go("home"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){vm.messages.unshift(message)}),$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}function sendMessage(){var message={text:vm.messageText};Socket.emit("chatMessage",message),vm.messageText=""}var vm=this;vm.messages=[],vm.messageText="",vm.sendMessage=sendMessage,init()}angular.module("chat").controller("ChatController",ChatController),ChatController.$inject=["$scope","$state","Authentication","Socket"]}();

!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin",{abstract:!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}angular.module("core.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenu("account",{roles:["user"]}),menuService.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),menuService.addSubMenuItem("account","settings",{title:"edit_profile",state:"settings.profile"}),menuService.addSubMenuItem("account","settings",{title:"edit_profile_picture",state:"settings.picture"}),menuService.addSubMenuItem("account","settings",{title:"change_password",state:"settings.password"})}angular.module("core").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeFilter($rootScope,$state,Authentication){function stateChangeStart(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){for(var allowed=!1,i=0,roles=toState.data.roles;i<roles.length;i++)if("guest"===roles[i]||Authentication.user&&void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(roles[i])!==-1){allowed=!0;break}allowed||(event.preventDefault(),null!==Authentication.user&&"object"==typeof Authentication.user?$state.transitionTo("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}function stateChangeSuccess(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)}function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",stateChangeStart),$rootScope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").run(routeFilter),routeFilter.$inject=["$rootScope","$state","Authentication"]}();
!function(){"use strict";function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"/modules/core/client/views/home.client.view.html",controller:"HomeController",controllerAs:"vm"}).state("not-found",{url:"/not-found",templateUrl:"/modules/core/client/views/404.client.view.html",controller:"ErrorController",controllerAs:"vm",params:{message:["$stateParams",function($stateParams){return $stateParams.message}]},data:{ignoreState:!0,pageTitle:"Not Found"}}).state("bad-request",{url:"/bad-request",templateUrl:"/modules/core/client/views/400.client.view.html",controller:"ErrorController",controllerAs:"vm",params:{message:["$stateParams",function($stateParams){return $stateParams.message}]},data:{ignoreState:!0,pageTitle:"Bad Request"}}).state("forbidden",{url:"/forbidden",templateUrl:"/modules/core/client/views/403.client.view.html",data:{ignoreState:!0,pageTitle:"Forbidden"}})}angular.module("core.routes").config(routeConfig),routeConfig.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function ErrorController($stateParams){var vm=this;vm.errorMessage=null,$stateParams.message&&(vm.errorMessage=$stateParams.message)}angular.module("core").controller("ErrorController",ErrorController),ErrorController.$inject=["$stateParams"]}();
!function(){"use strict";function HeaderController($scope,$state,Authentication,menuService,$translate){function stateChangeSuccess(){vm.isCollapsed=!1}var vm=this;vm.accountMenu=menuService.getMenu("account").items[0],vm.authentication=Authentication,vm.isCollapsed=!1,vm.menu=menuService.getMenu("topbar"),$scope.$on("$stateChangeSuccess",stateChangeSuccess),$scope.changeLang=function(langKey){$translate.use(langKey)}}angular.module("core").controller("HeaderController",HeaderController),HeaderController.$inject=["$scope","$state","Authentication","menuService","$translate"]}();
!function(){"use strict";function HomeController(){}angular.module("core").controller("HomeController",HomeController)}();
!function(){"use strict";function autofocus($timeout,$window){function link(scope,element,attrs){$window.innerWidth>=800&&$timeout(function(){var el=element[0];el.focus(),el.selectionStart=el.selectionEnd=el.value.length},100)}var directive={restrict:"A",link:link};return directive}angular.module("core").directive("autofocus",autofocus),autofocus.$inject=["$timeout","$window"]}();
!function(){"use strict";function pageTitle($rootScope,$interpolate,$state,$translate){function link(scope,element){function listener(event,toState){$translate("vegetable_garden_planner").then(function(applicationCoreTitle){if(toState.data&&toState.data.pageTitle){var stateTitle=$interpolate(toState.data.pageTitle)($state.$current.locals.globals);toState.data.name?$translate(stateTitle,"{name: '"+toState.data.name+"'}").then(function(translation){element.html(applicationCoreTitle+" - "+translation)}):$translate(stateTitle).then(function(translation){element.html(applicationCoreTitle+" - "+translation)})}else element.html(applicationCoreTitle)})}$rootScope.$on("$stateChangeSuccess",listener)}var directive={restrict:"A",link:link};return directive}angular.module("core").directive("pageTitle",pageTitle),pageTitle.$inject=["$rootScope","$interpolate","$state","$translate"]}();
!function(){"use strict";function showErrors($timeout,$interpolate){function compile(elem,attrs){function linkFn(scope,el,attrs,formCtrl){function checkValidity(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}function reset(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)}function toggleClasses(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}var inputEl,inputName,inputNgEl,options,showSuccess,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw new Error("show-errors element has no child input elements with a 'name' attribute class");scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},toggleClasses),scope.$on("show-errors-check-validity",checkValidity),scope.$on("show-errors-reset",reset)}if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw new Error("show-errors element does not have the 'form-group' or 'input-group' class");return linkFn}var directive={restrict:"A",require:"^form",compile:compile};return directive}angular.module("core").directive("showErrors",showErrors),showErrors.$inject=["$timeout","$interpolate"]}();
!function(){"use strict";function menuService(){function addMenu(menuId,options){return options=options||{},service.menus[menuId]={roles:options.roles||service.defaultRoles,items:options.items||[],shouldRender:shouldRender},service.menus[menuId]}function addMenuItem(menuId,options){if(options=options||{},service.validateMenuExistence(menuId),service.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,roles:null===options.roles||"undefined"==typeof options.roles?service.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)options.items.hasOwnProperty(i)&&service.addSubMenuItem(menuId,options.state,options.items[i]);return service.menus[menuId]}function addSubMenuItem(menuId,parentItemState,options){options=options||{},service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items[itemIndex].state===parentItemState&&service.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",params:options.params||{},roles:null===options.roles||"undefined"==typeof options.roles?service.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return service.menus[menuId]}function getMenu(menuId){return service.validateMenuExistence(menuId),service.menus[menuId]}function init(){shouldRender=function(user){if(this.roles.indexOf("*")!==-1)return!0;if(!user)return!1;for(var userRoleIndex in user.roles)if(user.roles.hasOwnProperty(userRoleIndex))for(var roleIndex in this.roles)if(this.roles.hasOwnProperty(roleIndex)&&this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1},addMenu("topbar",{roles:["*"]})}function removeMenu(menuId){service.validateMenuExistence(menuId),delete service.menus[menuId]}function removeMenuItem(menuId,menuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items.hasOwnProperty(itemIndex)&&service.menus[menuId].items[itemIndex].state===menuItemState&&service.menus[menuId].items.splice(itemIndex,1);return service.menus[menuId]}function removeSubMenuItem(menuId,submenuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)if(this.menus[menuId].items.hasOwnProperty(itemIndex))for(var subitemIndex in service.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items.hasOwnProperty(subitemIndex)&&service.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&service.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return service.menus[menuId]}function validateMenuExistence(menuId){if(menuId&&menuId.length){if(service.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")}var shouldRender,service={addMenu:addMenu,addMenuItem:addMenuItem,addSubMenuItem:addSubMenuItem,defaultRoles:["user","admin"],getMenu:getMenu,menus:{},removeMenu:removeMenu,removeMenuItem:removeMenuItem,removeSubMenuItem:removeSubMenuItem,validateMenuExistence:validateMenuExistence};return init(),service}angular.module("core").factory("menuService",menuService)}();
!function(){"use strict";function Socket(Authentication,$state,$timeout){function connect(){Authentication.user&&(service.socket=io())}function emit(eventName,data){service.socket&&service.socket.emit(eventName,data)}function on(eventName,callback){service.socket&&service.socket.on(eventName,function(data){$timeout(function(){callback(data)})})}function removeListener(eventName){service.socket&&service.socket.removeListener(eventName)}var service={connect:connect,emit:emit,on:on,removeListener:removeListener,socket:null};return connect(),service}angular.module("core").factory("Socket",Socket),Socket.$inject=["Authentication","$state","$timeout"]}();
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"system",state:"system",type:"dropdown",roles:["user","admin"]}),Menus.addSubMenuItem("topbar","system",{title:"list_crops",state:"crops.list"})}angular.module("crops").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("crops",{abstract:!0,url:"/crops",template:"<ui-view/>"}).state("crops.list",{url:"",templateUrl:"/modules/crops/client/views/list-crops.client.view.html",controller:"CropsListController",controllerAs:"vm",data:{pageTitle:"list_crops"}}).state("crops.create",{url:"/create",templateUrl:"/modules/crops/client/views/form-crop.client.view.html",controller:"CropsController",controllerAs:"vm",resolve:{cropResolve:newCrop},data:{roles:["user","admin"],pageTitle:"add_crop"}}).state("crops.edit",{url:"/:cropId/edit",templateUrl:"/modules/crops/client/views/form-crop.client.view.html",controller:"CropsController",controllerAs:"vm",resolve:{cropResolve:getCrop},data:{roles:["user","admin"],pageTitle:"edit_crop"}}).state("crops.view",{url:"/:cropId",templateUrl:"/modules/crops/client/views/view-crop.client.view.html",controller:"CropsController",controllerAs:"vm",resolve:{cropResolve:getCrop},data:{pageTitle:"view_crop"}})}function getCrop($stateParams,CropsService){return CropsService.get({cropId:$stateParams.cropId}).$promise}function newCrop(CropsService){return new CropsService}angular.module("crops.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getCrop.$inject=["$stateParams","CropsService"],newCrop.$inject=["CropsService"]}();
!function(){"use strict";function CropsController($scope,$state,$window,crop,Authentication,PlantFamilyService,PlantVarietiesService){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.crop.$remove($state.go("crops.list"))}function save(isValid){function successCallback(res){$state.go("crops.view",{cropId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.crop._id?vm.crop.$update(successCallback,errorCallback):vm.crop.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.cropForm"),!1)}var vm=this;vm.crop=crop,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,"crops.view"!==$state.current.name?vm.plantfamilies=PlantFamilyService.query():vm.varieties=PlantVarietiesService.getCrop({cropId:vm.crop._id})}angular.module("crops").controller("CropsController",CropsController),CropsController.$inject=["$scope","$state","$window","cropResolve","Authentication","PlantFamilyService","PlantVarietiesService"]}();
!function(){"use strict";function CropsListController($filter,CropsService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=15,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.crops,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,CropsService.query(function(data){vm.crops=data,vm.buildPager()})}angular.module("crops").controller("CropsListController",CropsListController),CropsListController.$inject=["$filter","CropsService"]}();
!function(){"use strict";function CropsService($resource){return $resource("/api/crops/:cropId",{cropId:"@_id"},{update:{method:"PUT"},getFamily:{method:"GET",url:"/api/crops/get-family/:familyId",isArray:!0}})}angular.module("crops.services").factory("CropsService",CropsService),CropsService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Friends",state:"admin.friends.list"})}angular.module("friends.admin").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.friends.list",{url:"",templateUrl:"/modules/friends/client/views/admin/list-friends.client.view.html",controller:"FriendsAdminListController",controllerAs:"vm",data:{roles:["admin"]}}).state("admin.friends.create",{url:"/create",templateUrl:"/modules/friends/client/views/admin/form-friend.client.view.html",controller:"FriendsAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{friendResolve:newFriend}}).state("admin.friends.edit",{url:"/:friendId/edit",templateUrl:"/modules/friends/client/views/admin/form-friend.client.view.html",controller:"FriendsAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{friendResolve:getFriend}})}function getFriend($stateParams,FriendsService){return FriendsService.get({friendId:$stateParams.friendId}).$promise}function newFriend(FriendsService){return new FriendsService}angular.module("friends.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getFriend.$inject=["$stateParams","FriendsService"],newFriend.$inject=["FriendsService"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Friends",state:"friends",type:"dropdown",roles:["user"]}),menuService.addSubMenuItem("topbar","friends",{title:"List Friends",state:"friends.list",roles:["user"]}),menuService.addSubMenuItem("topbar","friends",{title:"Search Friends",state:"friends.search",roles:["user"]})}angular.module("friends").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("friends",{abstract:!0,url:"/friends",template:"<ui-view/>"}).state("friends.list",{url:"",templateUrl:"/modules/friends/client/views/list-friends.client.view.html",controller:"FriendsListController",controllerAs:"vm",data:{pageTitle:"Friends List"}}).state("friends.search",{url:"",templateUrl:"/modules/friends/client/views/search-friends.client.view.html",controller:"FriendsSearchController",controllerAs:"vm",data:{pageTitle:"Friends Search"}}).state("friends.view",{url:"/:friendId",templateUrl:"/modules/friends/client/views/view-friend.client.view.html",controller:"FriendsController",controllerAs:"vm",resolve:{friendResolve:getFriend},data:{pageTitle:"Friend {{ friendResolve.title }}"}})}function getFriend($stateParams,FriendsService){return FriendsService.get({friendId:$stateParams.friendId}).$promise}angular.module("friends.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getFriend.$inject=["$stateParams","FriendsService"]}();
!function(){"use strict";function FriendsController($scope,friend,Authentication){var vm=this;vm.friend=friend,vm.authentication=Authentication}angular.module("friends").controller("FriendsController",FriendsController),FriendsController.$inject=["$scope","friendResolve","Authentication"]}();
!function(){"use strict";function FriendsListController(FriendsService){var vm=this;vm.friends=FriendsService.query()}angular.module("friends").controller("FriendsListController",FriendsListController),FriendsListController.$inject=["FriendsService"]}();
!function(){"use strict";function FriendsService($resource,$log){function createOrUpdate(friend){function onSuccess(friend){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return friend._id?friend.$update(onSuccess,onError):friend.$save(onSuccess,onError)}function handleError(error){$log.error(error)}var Friend=$resource("/api/friends/:friendId",{friendId:"@_id"},{update:{method:"PUT"}});return angular.extend(Friend.prototype,{createOrUpdate:function(){var friend=this;return createOrUpdate(friend)}}),Friend}angular.module("friends.services").factory("FriendsService",FriendsService),FriendsService.$inject=["$resource","$log"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addSubMenuItem("topbar","system",{title:"list_cultivation_plans",state:"cultivation-plans.list"})}angular.module("cultivation-plans").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("cultivation-plans",{abstract:!0,url:"/cultivation-plans",template:"<ui-view/>"}).state("cultivation-plans.list",{url:"",templateUrl:"/modules/cultivation-plans/client/views/list-cultivation-plans.client.view.html",controller:"CultivationPlansListController",controllerAs:"vm",data:{pageTitle:"cultivation-plans List"}}).state("cultivation-plans.create",{url:"/create",templateUrl:"/modules/cultivation-plans/client/views/form-cultivation-plan.client.view.html",controller:"CultivationPlansController",controllerAs:"vm",resolve:{cultivationPlanResolve:newCultivationPlan},data:{roles:["user","admin"],pageTitle:"cultivation-plans Create"}}).state("cultivation-plans.edit",{url:"/:cultivationPlanId/edit",templateUrl:"/modules/cultivation-plans/client/views/form-cultivation-plan.client.view.html",controller:"CultivationPlansController",controllerAs:"vm",resolve:{cultivationPlanResolve:getCultivationPlan},data:{roles:["user","admin"],pageTitle:"Edit CultivationPlan {{ cultivationPlanResolve.title }}"}}).state("cultivation-plans.view",{url:"/:cultivationPlanId",templateUrl:"/modules/cultivation-plans/client/views/view-cultivation-plan.client.view.html",controller:"CultivationPlansController",controllerAs:"vm",resolve:{cultivationPlanResolve:getCultivationPlan},data:{pageTitle:"CultivationPlan {{ cultivationPlanResolve.title }}"}})}function getCultivationPlan($stateParams,CultivationPlansService){return CultivationPlansService.get({cultivationPlanId:$stateParams.cultivationPlanId}).$promise}function newCultivationPlan(CultivationPlansService){return new CultivationPlansService}angular.module("cultivation-plans.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getCultivationPlan.$inject=["$stateParams","CultivationPlansService"],newCultivationPlan.$inject=["CultivationPlansService"]}();
!function(){"use strict";function CultivationPlansController($scope,$state,cultivationPlan,$window,Authentication,Crops,PlantVarieties){function changeCrop(){vm.varieties=PlantVarieties.getCrop({cropId:vm.cultivationPlan.crop._id})}function changeVariety(){var variety=JSON.parse(vm.cultivationPlan.variety);$scope.iconRatio=variety.cmInRow/variety.cmBetweenRow,$scope.iconScale=2*variety.cmInRow,$scope.iconwidth=2*variety.cmInRow,$scope.iconheight=2*variety.cmBetweenRow,vm.cultivationPlan.steps=[],newStep()}function newStep(){var step={};step.inplace=!0,vm.cultivationPlan.steps.push(step)}function removeStep(index){console.log("remove step:"+index),vm.cultivationPlan.steps.splice(index,1)}function remove(){$window.confirm("Are you sure you want to delete?")&&vm.cultivationPlan.$remove($state.go("cultivation-plans.list"))}function save(isValid){function successCallback(res){$state.go("cultivation-plans.view",{cultivationPlanId:res._id})}function errorCallback(res){vm.error=res.data.message}if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.form.cultivationPlanForm"),!1;if(vm.cultivationPlan._id)console.log(vm.cultivationPlan.systemDefault),vm.cultivationPlan.$update(successCallback,errorCallback);else{var variety=JSON.parse(vm.cultivationPlan.variety);vm.cultivationPlan.variety=variety._id,vm.cultivationPlan.$save(successCallback,errorCallback)}}var vm=this;vm.cultivationPlan=cultivationPlan,vm.authentication=Authentication,vm.authentication.isAdmin=Authentication.user.roles.indexOf("admin")!=-1,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,void 0===cultivationPlan._id?(vm.crops=Crops.query(),vm.crops.$promise.then(function(crops){cultivationPlan._id||(vm.cultivationPlan.steps=[])}),vm.cultivationPlan.validForOtherVarieties=!0):($scope.iconRatio=cultivationPlan.variety.cmInRow/cultivationPlan.variety.cmBetweenRow,$scope.iconScale=2*cultivationPlan.variety.cmInRow,$scope.iconwidth=2*cultivationPlan.variety.cmInRow,$scope.iconheight=2*cultivationPlan.variety.cmBetweenRow),vm.changeCrop=changeCrop,vm.changeVariety=changeVariety,vm.newStep=newStep,vm.removeStep=removeStep}angular.module("cultivation-plans").controller("CultivationPlansController",CultivationPlansController),CultivationPlansController.$inject=["$scope","$state","cultivationPlanResolve","$window","Authentication","CropsService","PlantVarietiesService"]}();
!function(){"use strict";function CultivationStepController($scope,FileUploader,Cropper,$timeout){function rotateBase64Image90Degree(base64data){var canvas=document.getElementById("c"),ctx=canvas.getContext("2d"),image=new Image;($scope.step||($scope.step={})).icon=base64data,image.src=base64data,image.onload=function(){canvas.width=image.height,canvas.height=image.width,ctx.rotate(90*Math.PI/180),ctx.translate(0,-canvas.width),ctx.drawImage(image,0,0);var dataUrl=canvas.toDataURL();$timeout(showIconVertical(dataUrl))}}function showIconVertical(dataUrl){$scope.step.iconVertical=dataUrl}function showCropper(){$scope.$broadcast($scope.showEvent)}function hideCropper(){$scope.$broadcast($scope.hideEvent)}var file,data;$scope.options={maximize:!0,aspectRatio:$scope.iconRatio,crop:function(dataNew){data=dataNew,$scope.scale($scope.iconScale)}},$scope.preview=function(){file&&data&&Cropper.crop(file,data).then(Cropper.encode).then(function(dataUrl){rotateBase64Image90Degree(dataUrl)})},$scope.scale=function(width){Cropper.crop(file,data).then(function(blob){return Cropper.scale(blob,{width:width})}).then(Cropper.encode).then(function(dataUrl){rotateBase64Image90Degree(dataUrl)})},$scope.showEvent="show",$scope.hideEvent="hide",$scope.uploader=new FileUploader,$scope.uploader.onAfterAddingFile=function(fileItem){$timeout(hideCropper),Cropper.encode(file=fileItem._file).then(function(dataUrl){$scope.dataUrl=dataUrl,$timeout(showCropper)})}}angular.module("cultivation-plans").controller("CultivationStepController",CultivationStepController),CultivationStepController.$inject=["$scope","FileUploader","Cropper","$timeout"]}();
!function(){"use strict";function CultivationPlansListController(CultivationPlansService){var vm=this;vm.cultivationPlans=CultivationPlansService.query()}angular.module("cultivation-plans").controller("CultivationPlansListController",CultivationPlansListController),CultivationPlansListController.$inject=["CultivationPlansService"]}();
!function(){"use strict";function SelectCultivationPlanController($scope,planting,$uibModalInstance,$state){console.log("planting: "+planting.cultivationPlans);var vm=this;$scope.vm=vm,$scope.cultivationPlans=planting.cultivationPlans,$scope.planting=planting,planting.currentPlan=planting.cultivationPlan,$scope.applyCultivationPlan=function(){$uibModalInstance.close(planting)},$scope.createNew=function(){$uibModalInstance.dismiss("cancel"),$state.go("cultivation-plans.create")},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}angular.module("cultivation-plans").controller("SelectCultivationPlanController",SelectCultivationPlanController),SelectCultivationPlanController.$inject=["$scope","planting","$uibModalInstance","$state"]}();
!function(){"use strict";function CultivationPlansService($resource){return $resource("/api/cultivation-plans/:cultivationPlanId",{cultivationPlanId:"@_id"},{update:{method:"PUT"},getByVariety:{method:"GET",url:"/api/cultivation-plans/plantvariety/:varietyId",isArray:"true"}})}angular.module("cultivation-plans.services").factory("CultivationPlansService",CultivationPlansService),CultivationPlansService.$inject=["$resource"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("editGardenpart",{url:"/gardenparts/:bk/:selectedDate/:plant",templateUrl:"/modules/gardenparts/client/views/edit-gardenpart.client.view.html",controller:"GardenpartsController",controllerAs:"vm",resolve:{gardenpartResolve:getGardenpart},data:{roles:["user","admin"],pageTitle:"Edit gardenpart"}})}function getGardenpart(GardenpartService,$stateParams,Gardens,RuleSets,PastPlantings){var gardenpart=GardenpartService.get({bk:$stateParams.bk,selectedDate:$stateParams.selectedDate,plant:$stateParams.plant});return gardenpart.$promise.then(function(gardenpart){var i,plantings=gardenpart.plantings,gardenparttop=parseInt(gardenpart.elemtop),gardenpartleft=parseInt(gardenpart.elemleft);for(i=0;i<plantings.length;i++)plantings[i].elemtop=parseInt(plantings[i].elemtop)-gardenparttop,plantings[i].elemleft=parseInt(plantings[i].elemleft)-gardenpartleft;for(plantings=gardenpart.futureplantings,i=0;i<plantings.length;i++)plantings[i].elemtop=parseInt(plantings[i].elemtop)-gardenparttop,plantings[i].elemleft=parseInt(plantings[i].elemleft)-gardenpartleft,plantings[i].future=!0}),gardenpart.$promise}angular.module("gardenparts.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getGardenpart.$inject=["GardenpartService","$stateParams","GardensService","RuleSetsService","PastPlantings"]}();
!function(){"use strict";function GardenpartsController($scope,$state,$stateParams,gardenpart,Authentication,Gardenpart,Plantvarieties,Plantings,PastPlantings){function cropgroupByCrop(crop){var cropgroup=!1;loop:for(var c=0;c<gardenpart.ruleset.cropgroups.length;c++)for(var crops=gardenpart.ruleset.cropgroups[c].crops,d=0;d<crops.length;d++)if(crops[d]===crop){cropgroup=gardenpart.ruleset.cropgroups[c]._id;break loop}return cropgroup}function getPlantvarieties(){var datearray=$stateParams.selectedDate.split("-"),now=new Date;now.setYear(datearray[0]);var month=datearray[1]-1;now.setMonth(month),now.setDate(datearray[2]);var start=new Date(now.getFullYear(),0,0),diff=now-start,oneDay=864e5,day=Math.floor(diff/oneDay);vm.plantvarieties=Plantvarieties.get({doy:day}),vm.plantvarieties.$promise.then(function(plantvarieties){if(void 0!==vm.gardenpart.plant){plantvarieties.unshift(vm.gardenpart.plant);for(var index=1;index<plantvarieties.length&&plantvarieties[index]._id!==vm.gardenpart.plant._id;)index++;plantvarieties.splice(index,1)}for(var i=0;i<plantvarieties.length;i++){for(var plant=plantvarieties[i],newCrop=!0,j=0;newCrop===!0&&j<vm.crops.length;){var crop=vm.crops[j];crop._id===plant.crop._id&&(plant.crop=plant.crop._id,newCrop=!1,crop.plantvarieties.push(plant)),j++}if(newCrop){var addcrop=plant.crop;plant.crop=plant.crop._id,addcrop.plantvarieties=[],addcrop.plantvarieties.push(plant),vm.crops.push(addcrop)}}$scope.rotationAdvice(vm.crops[0]._id),$scope.$broadcast("plantingsLoaded")})}var vm=this;vm.gardenpart=gardenpart,getPlantvarieties(),$scope.authentication=Authentication,vm.selectedDate=$stateParams.selectedDate,$scope.plantings=[],$scope.newplantings=[],$scope.cancelPlantings=[],$scope.harvests=[],$scope.changedPlans={},vm.crops=[],$scope.cropClicked=function(crop){$scope.rotationAdvice(crop)};for(var pp=gardenpart.pastplantings,j=0;j<pp.length;j++){var planting=pp[j];planting.elemtop=parseInt(planting.elemtop)-gardenpart.elemtop,planting.elemleft=parseInt(planting.elemleft)-gardenpart.elemleft,planting.cropgroup=cropgroupByCrop(planting.plantVariety.crop)}$scope.rotationAdvice=function(crop){console.log("calculating the advice! crop:"+crop);var cropgroup=cropgroupByCrop(crop);console.log("calculating the advice! cropgroup:"+cropgroup);for(var i=0;i<gardenpart.pastplantings.length;i++){var planting=gardenpart.pastplantings[i];planting.greenlevel=null,planting.redlevel=null;var yearsApart=new Date(new Date(vm.selectedDate)-new Date(planting.validTo)).getFullYear()-1970;if(console.log("years apart: "+yearsApart+" date:"+planting.validTo),planting.opacity=1-yearsApart*yearsApart/36,yearsApart<2&&cropgroup===planting.cropgroup)planting.greenlevel=0,planting.redlevel=255;else for(var k=0;k<gardenpart.ruleset.rotationrules.length;k++)console.log("cropgroup"+cropgroup+"rotationrules[k].cropgroup"+gardenpart.ruleset.rotationrules[k].cropgroup),console.log("previousCropgroup:"+gardenpart.ruleset.rotationrules[k].previousCropgroup+" planting.cropgroup: "+planting.cropgroup),cropgroup===gardenpart.ruleset.rotationrules[k].cropgroup&&gardenpart.ruleset.rotationrules[k].previousCropgroup===planting.cropgroup&&(console.log("rule applies, checking time"),gardenpart.ruleset.rotationrules[k].yearsBetween>yearsApart?(planting.greenlevel=0,planting.redlevel=255):(planting.greenlevel=255,planting.redlevel=0))}},$scope.updatePlantings=function(){var i;for(i=0;i<$scope.harvests.length;i++)$scope.harvests[i].$save();var plantings=$scope.newplantings;for(i=0;i<plantings.length;i++)plantings[i].elemtop=parseInt(plantings[i].elemtop)+parseInt(vm.gardenpart.elemtop),plantings[i].elemleft=parseInt(plantings[i].elemleft)+parseInt(vm.gardenpart.elemleft),plantings[i].plantVariety=plantings[i].plantVariety._id;var updateplantings={newplantings:plantings,cancelplantings:$scope.cancelPlantings,changedPlans:$scope.changedPlans};Plantings.updatePlantings({bk:vm.gardenpart.garden.bk,selectedDate:$stateParams.selectedDate},updateplantings,function(){$state.go("viewGarden",{bk:vm.gardenpart.garden.bk,selectedDate:$stateParams.selectedDate})})},$scope.$on("addPlantvariety",function(event,plantvariety){var newplanting={garden:gardenpart.garden.bk,validFrom:$stateParams.selectedDate,plantVariety:plantvariety,elemwidth:2*plantvariety.cmInRow,elemheight:2*plantvariety.cmBetweenRow,elemtop:0,elemleft:0,orientation:"horizontal",cmBetweenRow:plantvariety.cmBetweenRow,cmInRow:plantvariety.cmInRow};$scope.newplantings.push(newplanting),vm.gardenpart.plantings.push(newplanting),console.log("plantvariety clicked! "+plantvariety.name)}),$scope.cancelNewPlanting=function(planting){var index=$scope.newplantings.indexOf(planting);$scope.newplantings.splice(index,1)},$scope.cancelPlanting=function(planting){$scope.cancelPlantings.push(planting[0]._id)}}angular.module("gardenparts").controller("GardenpartsController",GardenpartsController),GardenpartsController.$inject=["$scope","$state","$stateParams","gardenpartResolve","Authentication","GardenpartService","Plantvarieties","Plantings","PastPlantings"]}();
!function(){"use strict";function PlantingController($scope,harvestModal,cultivationPlanModal,CultivationPlansService){"vertical"===$scope.planting.orientation?($scope.horizontal=Math.round($scope.planting.cmBetweenRow),$scope.vertical=Math.round($scope.planting.cmInRow)):($scope.horizontal=Math.round($scope.planting.cmInRow),$scope.vertical=Math.round($scope.planting.cmBetweenRow)),$scope.menuOptions=[];var cultivationPlan=["Pas cultivationPlan toe",function(){var size="lg",cps=CultivationPlansService.getByVariety({varietyId:$scope.planting.plantVariety._id});cps.$promise.then(function(cultivationPlans){var planting=$scope.planting;planting.cultivationPlans=cultivationPlans;var modalInstance=cultivationPlanModal.open({templateUrl:"/modules/cultivation-plans/client/views/select-cultivation-plan.client.view.html",controller:"SelectCultivationPlanController",size:size,resolve:{planting:function(){return planting}}});modalInstance.result.then(function(planting){delete planting.cultivationPlans,planting.currentPlan!=planting.cultivationPlan&&"undefined"!=typeof planting._id&&(console.log("cultivationplan has changed!"),$scope.changedPlans[planting._id]=planting.cultivationPlan),planting.currentPlan!=planting.cultivationPlan&&(planting.cultivationPlanStep=0)},function(){console.log("Modal dismissed at: "+new Date)})})}];"undefined"==typeof $scope.planting._id?($scope.menuOptions.push(cultivationPlan),$scope.menuOptions.push(["Rotate",function(){$scope.rotate()}]),$scope.menuOptions.push(null),$scope.menuOptions.push(["Cancel",function(){var planting=$scope.vm.gardenpart.plantings.splice($scope.$index,1);$scope.cancelNewPlanting(planting)}])):($scope.planting.future||$scope.menuOptions.push(["Harvest",function(){var size="lg",modalInstance=harvestModal.open({templateUrl:"/modules/harvests/client/views/create-harvest.client.view.html",controller:"HarvestsController",size:size,resolve:{planting:function(){return $scope.planting}}});modalInstance.result.then(function(harvest){console.log("planting harvest result: "+JSON.stringify(harvest)),$scope.harvests.push(harvest),$scope.vm.gardenpart.plantings.splice($scope.$index,1)},function(){console.log("Modal dismissed at: "+new Date)})}]),$scope.menuOptions.push(cultivationPlan),$scope.menuOptions.push(["Cancel",function(){var planting;planting=$scope.planting.future?$scope.vm.gardenpart.futureplantings.splice($scope.$index,1):$scope.vm.gardenpart.plantings.splice($scope.$index,1),$scope.cancelPlanting(planting)}])),$scope.updatePlantingCoordinates=function(top,left,width,height){var planting=$scope.planting;planting.elemtop=top,planting.elemleft=left,planting.elemwidth=width,planting.elemheight=height},$scope.updatePlantingCoordinatesStop=function(top,left,width,height){$scope.updatePlantingCoordinates(top,left,width,height)}}angular.module("gardenparts").controller("PlantingController",PlantingController),PlantingController.$inject=["$scope","$uibModal","$uibModal","CultivationPlansService"]}();
"use strict";angular.module("gardenparts").controller("PlantingpopoverController",["$scope",function($scope){}]);
"use strict";angular.module("gardenparts").directive("plantvarietyimage",["$rootScope",function($rootScope){return{restrict:"A",link:function(scope,element,attrs){scope.plantVarietyClicked=function(){$rootScope.$broadcast("addPlantvariety",scope.plantvariety)}}}}]);
"use strict";var getCoordinates=function(elem){var el=$(elem),co={};return co.top=el.css("top").replace("px",""),co.left=el.css("left").replace("px",""),co.height=el.css("height").replace("px",""),co.width=el.css("width").replace("px",""),co};angular.module("gardenparts").directive("planting",["$timeout",function($timeout){return{restrict:"A",link:function(scope,element,attrs){var selectedDate=new Date(scope.vm.selectedDate),plantingValid=new Date(scope.planting.validFrom),timeDiff=Math.abs(selectedDate.getTime()-plantingValid.getTime()),dayDifference=Math.ceil(timeDiff/864e5),daysHarvest=scope.planting.plantVariety.minGrowthDuration-dayDifference;scope.dateHarvest=new Date,scope.dateHarvest.setDate(selectedDate.getDate()+daysHarvest);var updateCoordinates=function(){var co=getCoordinates(element,scope.vm.zoom);scope.updatePlantingCoordinates(co.top/scope.vm.zoom,co.left/scope.vm.zoom,co.width/scope.vm.zoom,co.height/scope.vm.zoom),scope.$apply()},updateCoordinatesStop=function(){var co=getCoordinates(element,scope.vm.zoom);scope.updatePlantingCoordinatesStop(co.top/scope.vm.zoom,co.left/scope.vm.zoom,co.width/scope.vm.zoom,co.height/scope.vm.zoom),scope.$apply()},makeDraggable=function(){var draggableConfig={stop:updateCoordinatesStop,drag:updateCoordinates,animate:!0,grid:[1*scope.vm.zoom,1*scope.vm.zoom],containment:"parent",revert:"valid",snap:".planting ",snapmode:"outer",snapTolerance:5*scope.vm.zoom};element.draggable(draggableConfig)},makeResizable=function(){var resizableConfig={stop:updateCoordinatesStop,resize:updateCoordinates,grid:[scope.planting.cmInRow*scope.vm.zoom,scope.planting.cmBetweenRow*scope.vm.zoom],handles:"all",containment:"parent",autoHide:!0,snap:!1};element.resizable(resizableConfig)};scope.popoverEvent=function(){$timeout(function(){element.trigger("customEvent")},0)},element.on("click",function(){element.effect("highlight")}),"future"===attrs.planting?element.addClass("future-planting"):element.addClass("planting"),scope.$on("updatedZoom",function(){"undefined"==typeof scope.planting._id&&$timeout(function(){makeDraggable(),makeResizable()})}),"undefined"==typeof scope.planting._id?(scope.opacity=1,element.addClass("newPlanting"),makeResizable(),makeDraggable()):scope.opacity=.5,"future"!==attrs.planting&&element.droppable(),scope.rotate=function(){var numberPlantsVertical,numberPlantsHorizontal;"vertical"===scope.planting.orientation?(scope.planting.orientation="horizontal",scope.horizontal=Math.round(scope.planting.cmInRow),scope.vertical=Math.round(scope.planting.cmBetweenRow),element.resizable("option","grid",[scope.planting.cmInRow*scope.vm.zoom,scope.planting.cmBetweenRow*scope.vm.zoom]),numberPlantsVertical=Math.floor(scope.planting.elemheight/scope.planting.cmBetweenRow),0===numberPlantsVertical&&(numberPlantsVertical=1),numberPlantsHorizontal=Math.floor(scope.planting.elemwidth/scope.planting.cmBetweenRow),0===numberPlantsHorizontal&&(numberPlantsHorizontal=1),console.log("horizontal numberPlantsHorizontal: "+numberPlantsHorizontal+" scope.planting.elemwidth: "+scope.planting.elemwidth+" scope.planting.cmInRow: "+scope.planting.cmInRow),console.log(" Number of plants vertical: "+numberPlantsVertical),scope.planting.elemhwidth=numberPlantsHorizontal*scope.planting.cmInRow,scope.planting.elemhheight=numberPlantsVertical*scope.planting.cmBetweenRow):(scope.horizontal=Math.round(scope.planting.cmBetweenRow),scope.vertical=Math.round(scope.planting.cmInRow),scope.planting.orientation="vertical",element.resizable("option","grid",[scope.planting.cmBetweenRow*scope.vm.zoom,scope.planting.cmInRow*scope.vm.zoom]),numberPlantsVertical=Math.floor(scope.planting.elemheight/scope.planting.cmInRow),0===numberPlantsVertical&&(numberPlantsVertical=1),numberPlantsHorizontal=Math.floor(scope.planting.elemwidth/scope.planting.cmBetweenRow),0===numberPlantsHorizontal&&(numberPlantsHorizontal=1),console.log("vertical numberPlantsHorizontal: "+numberPlantsHorizontal+" plantingwidth: "+scope.planting.elemwidth),console.log(" Number of plants vertical: "+numberPlantsVertical),scope.planting.elemheight=numberPlantsVertical*scope.planting.cmInRow,scope.planting.elemwidth=numberPlantsHorizontal*scope.planting.cmBetweenRow,console.log(" plantingwidth: "+element.css("width")))}}}}]);
"use strict";angular.module("gardenparts").directive("zoomable",["$rootScope",function($rootScope){return{restrict:"A",link:function(scope,element,attrs){scope.vm||(scope.vm={}),scope.vm.zoom=1;var broadcastZoom=function(){scope.zoom=scope.vm.zoom,console.log("zoomIn!"+scope.vm.zoom),$rootScope.$broadcast("updatedZoom",scope.vm.zoom)};scope.$on("plantingsLoaded",function(){console.log("plantingsLoaded in plantingpart"),scope.vm.zoom=2,broadcastZoom()}),scope.zoomIn=function(){scope.vm.zoom+=.2,broadcastZoom()},scope.zoomOut=function(){scope.vm.zoom-=.2,broadcastZoom()}}}}]);
!function(){"use strict";function GardenpartService($resource,$stateParams){return $resource("/api/gardenpart/:bk/:selectedDate/:plant",{bk:"@bk",selectedDate:$stateParams.selectedDate},{update:{method:"PUT"}})}angular.module("gardenparts.services").factory("GardenpartService",GardenpartService),GardenpartService.$inject=["$resource","$stateParams"]}();
"use strict";angular.module("gardenparts.services").factory("PastPlantings",["$resource","$stateParams",function($resource,$stateParams){return $resource("/api/past-plantings/:bk/:selectedDate",{bk:"@bk",selectedDate:$stateParams.selectedDate},{get:{isArray:!0}})}]);
"use strict";angular.module("gardenparts").factory("Plantings",["$resource",function($resource){return $resource("/api/plantings/:bk/:selectedDate",{selectedDate:"@selectedDate",bk:"@bk"},{updatePlantings:{method:"PUT"}})}]);
"use strict";angular.module("gardenparts").factory("Plantvarieties",["$resource",function($resource){return $resource("/api/plant-varieties/group-by-crop/:doy",{doy:"@doy"},{get:{isArray:!0}})}]);
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"vegetable_garden",state:"gardens",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","gardens",{title:"list_vegetable_gardens",state:"listGardens"}),Menus.addSubMenuItem("topbar","gardens",{title:"create_vegetable_garden",state:"createGarden",roles:["user"]})}angular.module("gardens").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("listGardens",{url:"/gardens/list/:plant/:selectedDate",templateUrl:"/modules/gardens/client/views/list-gardens.client.view.html",controller:"GardensListController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Gardens list"}}).state("createGarden",{url:"/gardens/create",templateUrl:"/modules/gardens/client/views/form-garden.client.view.html",controller:"GardensController",controllerAs:"vm",resolve:{gardenResolve:newGarden},data:{roles:["user","admin"],pageTitle:"Create garden"}}).state("viewGarden",{url:"/gardens/:bk/:selectedDate",templateUrl:"/modules/gardens/client/views/view-garden.client.view.html",controller:"GardensController",controllerAs:"vm",resolve:{gardenResolve:getGarden},data:{roles:["user","admin"],pageTitle:"View garden"}}).state("plantGarden",{url:"/gardens/plant/:bk/:selectedDate/:plant",templateUrl:"/modules/gardens/client/views/view-garden.client.view.html",controller:"PlantGardenController",controllerAs:"vm",resolve:{gardenResolve:getGarden},data:{roles:["user","admin"],pageTitle:"Plant garden"}}).state("editGarden",{url:"/gardens/:bk/edit/:selectedDate",templateUrl:"/modules/gardens/client/views/form-garden.client.view.html",controller:"GardensController",controllerAs:"vm",resolve:{gardenResolve:getGarden},data:{roles:["user","admin"],pageTitle:"Edit garden"}}).state("designGarden",{url:"/gardens/:gardenId/layout/:selectedDate",templateUrl:"/modules/gardens/client/views/layout-garden.client.view.html"})}function getGarden($stateParams,GardensService){var garden=GardensService.get({bk:$stateParams.bk,selectedDate:$stateParams.selectedDate,plant:$stateParams.plant});return garden.$promise.then(function(garden){for(var gardentop=parseInt(garden.elemtop),gardenleft=parseInt(garden.elemleft),gardenparts=garden.gardenparts,plantings=garden.plantings,pastplantings=garden.pastplantings,i=0;i<gardenparts.length;i++){var part=gardenparts[i],partbottomTop=parseInt(part.elemtop)+parseInt(part.elemheight),partrightLeft=parseInt(part.elemleft)+parseInt(part.elemwidth);part.plantings=[];for(var toRemove=[],j=0;j<plantings.length;j++){var planting=plantings[j];partbottomTop>planting.elemtop&&planting.elemtop>=part.elemtop&&partrightLeft>planting.elemleft&&planting.elemleft>=part.elemleft&&(planting.elemtop=parseInt(planting.elemtop)-parseInt(part.elemtop),planting.elemleft=parseInt(planting.elemleft)-parseInt(part.elemleft),part.plantings.push(planting),toRemove.push(j))}for(;toRemove.length>0;)plantings.splice(toRemove.pop(),1);if(part.elemtop=parseInt(part.elemtop)-gardentop,part.elemleft=parseInt(part.elemleft)-gardenleft,pastplantings){part.pastplantings=[];for(var k=0;k<pastplantings.length;k++){var pastplanting=pastplantings[k];partbottomTop>pastplanting.elemtop&&pastplanting.elemtop>=part.elemtop&&partrightLeft>pastplanting.elemleft&&pastplanting.elemleft>=part.elemleft&&(pastplanting.elemtop=parseInt(pastplanting.elemtop)-parseInt(part.elemtop),pastplanting.elemleft=parseInt(pastplanting.elemleft)-parseInt(part.elemleft),part.pastplantings.push(pastplanting))}}}return garden}),garden.$promise}function newGarden(GardensService){return new GardensService}angular.module("gardens.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getGarden.$inject=["$stateParams","GardensService"],newGarden.$inject=["GardensService"]}();
"use strict";angular.module("gardens").controller("EditformController",["$scope","$rootScope","Gardendata","UsersService","$stateParams",function($scope,$rootScope,Gardendata,Users,$stateParams){$scope.selectedDate=$stateParams.selectedDate,$scope.updateGarden=function(){$rootScope.$broadcast("updateGarden")},$scope.garden=Gardendata.getGarden(),$scope.garden.$promise.then(function(){$scope.bk=$scope.garden.bk}),$scope.addKeeper=function(){$scope.error="",$scope.newkeeper===$scope.garden.user.username?$scope.error="You don't need to add yourself":Users.get({name:$scope.newkeeper}).$promise.then(function(user){$scope.garden.keepers.push(user),$scope.newkeeper=""},function(errorResponse){$scope.error=errorResponse.data.message})}}]);
"use strict";angular.module("gardens").controller("FormController",["$scope","Gardendata","Authentication","$rootScope",function($scope,Gardendata,Authentication,$rootScope){if($scope.create=function(){$rootScope.$broadcast("createGarden")},$scope.updateGarden=function(){Gardendata.setGarden($scope.vm.garden)},$scope.$on("error",function(){$scope.error=Gardendata.getError()}),$scope.authentication=Authentication,$scope.vm.garden=Gardendata.getGarden(),$scope.setDate=function(date){$scope.vm.garden.selectedDate=date},$scope.vm.garden&&"undefined"===$scope.vm.garden.selectedDate){var today=new Date;$scope.vm.garden.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2),console.log("selected date! "+$scope.garden.selectedDate)}}]);
"use strict";angular.module("gardens").controller("GardenpartController",["$scope","$stateParams","$location","Authentication","GardenpartService",function($scope,$stateParams,$location,Authentication,Gardenpart){$scope.menuOptions=[],"undefined"==typeof $scope.gardenpart._id&&($scope.menuOptions.push(["Rotate",function(){$scope.rotate()}]),$scope.menuOptions.push(null)),$scope.menuOptions.push(["Remove",function(){var part=$scope.gardenparts.splice($scope.$index,1);$scope.deletePart(part[0])}]),$scope.update=function(top,left,width,height){$scope.tooltiptext="<br />breedte: "+height+" cm<br />lengte: "+width+" cm<br />oppervlakte: "+height*width/1e4+" m²";var gardenpart=$scope.gardenpart;gardenpart.elemtop=top,gardenpart.elemleft=left,gardenpart.elemwidth=width,gardenpart.elemheight=height}}]);
!function(){"use strict";function GardensController($scope,$state,$window,garden,Authentication,$stateParams,GardenpartsService,Users,RuleSetsService){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.garden.$remove($state.go("gardens.list"))}function updateParts(){var i,garden=vm.garden,gardenparts=vm.garden.gardenparts;for(i=0;i<gardenparts.length;i++)gardenparts[i].elemtop=parseInt(gardenparts[i].elemtop)+parseInt(garden.elemtop),gardenparts[i].elemleft=parseInt(gardenparts[i].elemleft)+parseInt(garden.elemleft);var modified=[];for(i=0;i<gardenparts.length;i++)gardenparts[i].modified&&(delete gardenparts[i].modified,modified.push(gardenparts[i]));modified.length>0&&GardenpartsService.updateParts({bk:garden.bk,selectedDate:$stateParams.selectedDate},modified)}function save(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.form.gardenForm"),!1;if(vm.garden._id){updateParts();var garden=vm.garden;garden.validFrom=$stateParams.selectedDate;var leankeepers=[],keepers=vm.garden.keepers;console.log("vm.garden.keepers: "+vm.garden.keepers);for(var i=0;i<keepers.length;i++)console.log("garden.keepers[i]"+keepers[i]._id),leankeepers.push(keepers[i]._id);garden.keepers=leankeepers,console.log("garden.keepers"+garden.keepers),$state.$current.data&&"gardens.create"===$state.$current.data.name&&($stateParams.selectedDate=$scope.selectedDate),garden.selectedDate=$stateParams.selectedDate,garden.$update({selectedDate:$stateParams.selectedDate},successCallback,errorCallback)}else vm.garden.validFrom=new Date(0),vm.garden.$save(successCallback,errorCallback)}function successCallback(res){"createGarden"===$state.current.name?$state.go("designGarden",{gardenId:res._id,selectedDate:vm.selectedDate}):$state.go("viewGarden",{bk:$stateParams.bk,selectedDate:$stateParams.selectedDate})}function errorCallback(res){vm.error=res.data.message}var vm=this;if(vm.garden=garden,vm.authentication=Authentication,vm.selectedDate=$stateParams.selectedDate,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,$scope.setDate=function(date){vm.selectedDate=date},"editGarden"!==$state.current.name&&"createGarden"!==$state.current.name||(vm.rulesets=RuleSetsService.query()),"editGarden"===$state.current.name&&($scope.updateCoordinates=function(top,left,height,width){var cancel=!1;top!==vm.garden.elemtop&&(angular.forEach(vm.garden.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemtop-(top-vm.garden.elemtop);newposition<0&&(cancel=!0)}),cancel?height=vm.garden.elemheight:(angular.forEach(vm.garden.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemtop-(top-vm.garden.elemtop);gardenpart.elemtop=newposition}),vm.garden.elemtop=top,$scope.minHeight=$scope.initialMinHeight+($scope.initialTop-top))),left===vm.garden.elemleft||cancel||(angular.forEach(vm.garden.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemleft-(left-vm.garden.elemleft);newposition<0&&(cancel=!0)}),cancel?width=vm.garden.elemwidth:(angular.forEach(vm.garden.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemleft-(left-vm.garden.elemleft);gardenpart.elemleft=newposition}),vm.garden.elemleft=left,$scope.minWidth=$scope.initialMinWidth+($scope.initialLeft-left))),vm.garden.elemwidth=width,vm.garden.elemheight=height;var opp=height*width/1e4;return $scope.tooltiptext="breedte: "+height+" cm<br />lengte: "+width+" cm<br />oppervlakte: "+opp+" m²<br /> ± "+Math.round(opp/15)+" personen",cancel}),"createGarden"===$state.current.name){var today=new Date;vm.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2),vm.garden.ruleset="5688553504e0daf62b4b8906",console.log("vm.selectedDate"+vm.selectedDate),$scope.updateCoordinates=function(top,left,height,width){vm.garden.elemtop=top,vm.garden.elemleft=left,vm.garden.elemwidth=width,vm.garden.elemheight=height;var opp=Math.round(height*width/1e4);$scope.tooltiptext="breedte: "+height+" cm lengte: "+width+" cm oppervlakte: "+opp+" m² ± "+Math.round(height*width/15e4)+" personen"}}$scope.addKeeper=function(){vm.error="",vm.newkeeper===vm.authentication.user.username?vm.error="You don't need to add yourself":Users.get({name:vm.newkeeper}).$promise.then(function(user){vm.garden.keepers||(vm.garden.keepers=[]),vm.garden.keepers.push(user),vm.newkeeper=""},function(errorResponse){vm.error=errorResponse.data.message})},$scope.back=function(){console.log("back!"+JSON.stringify($state.previous)),$state.go($state.previous.state.name,$state.previous.params)}}angular.module("gardens").controller("GardensController",GardensController),GardensController.$inject=["$scope","$state","$window","gardenResolve","Authentication","$stateParams","GardenpartsService","UsersService","RuleSetsService"]}();
"use strict";angular.module("gardens").controller("GardenversionsController",["$scope","$state","$stateParams","$location","Authentication","GardensService","Gardenversions","GardenpartsService","Gardendata",function($scope,$state,$stateParams,$location,Authentication,Gardens,Gardenversions,Gardenpart,Gardendata){$scope.authentication=Authentication,$scope.gardenparts=[];var newparts=[],delparts=[];if("undefined"==typeof $stateParams.selectedDate){var today=new Date;$scope.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2),$stateParams.selectedDate=$scope.selectedDate}else $scope.selectedDate=$stateParams.selectedDate;$scope.updateCoordinates=function(top,left,height,width){var cancel=!1;top!==$scope.garden.elemtop&&(angular.forEach($scope.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemtop-(top-$scope.garden.elemtop);newposition<0&&(cancel=!0)}),cancel?height=$scope.garden.elemheight:(angular.forEach($scope.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemtop-(top-$scope.garden.elemtop);gardenpart.elemtop=newposition}),$scope.garden.elemtop=top,$scope.minHeight=$scope.initialMinHeight+($scope.initialTop-top))),left===$scope.garden.elemleft||cancel||(angular.forEach($scope.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemleft-(left-$scope.garden.elemleft);newposition<0&&(cancel=!0)}),cancel?width=$scope.garden.elemwidth:(angular.forEach($scope.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemleft-(left-$scope.garden.elemleft);gardenpart.elemleft=newposition}),$scope.garden.elemleft=left,$scope.minWidth=$scope.initialMinWidth+($scope.initialLeft-left))),$scope.garden.elemwidth=width,$scope.garden.elemheight=height;var opp=height*width/1e4;return $scope.tooltiptext="breedte: "+height+" cm<br />lengte: "+width+" cm<br />oppervlakte: "+opp+" m²<br /> ± "+Math.round(opp/15)+" personen",cancel},$scope.deletePart=function(part){if("undefined"==typeof part._id){var index=newparts.indexOf(part);newparts.splice(index,1)}else console.log("delete part: "+JSON.stringify(part)),part.validTo=$stateParams.selectedDate,delparts.push(part)},$scope.$on("addNewGardenpart",function(event,tool){var newpart={garden:$scope.garden.bk,validFrom:$stateParams.selectedDate,type:tool.name};newparts.push(newpart),$scope.gardenparts.push(newpart)}),$scope.$on("updateGarden",function(){$scope.updateParts();var garden=$scope.garden;garden.validFrom=$scope.selectedDate;for(var leankeepers=[],keepers=garden.keepers,i=0;i<keepers.length;i++)console.log("garden.keepers[i]"+keepers[i]._id),leankeepers.push(keepers[i]._id);garden.keepers=leankeepers,console.log("garden.keepers"+garden.keepers),$state.$current.data&&"gardens.create"===$state.$current.data.name&&($stateParams.selectedDate=$scope.selectedDate),garden.selectedDate=$stateParams.selectedDate,garden.$update({selectedDate:$scope.selectedDate},function(garden){console.log("success, got data: ",garden),$state.go("viewGarden",{bk:garden.bk,selectedDate:$scope.selectedDate})},function(errorResponse){$scope.error=errorResponse.data.message})}),$scope.updateParts=function(){var garden=$scope.garden;newparts._id=garden._id;var i,gardenparts=$scope.gardenparts;for(i=0;i<gardenparts.length;i++)gardenparts[i].elemtop=parseInt(gardenparts[i].elemtop)+parseInt(garden.elemtop),gardenparts[i].elemleft=parseInt(gardenparts[i].elemleft)+parseInt(garden.elemleft);Gardenpart.createParts({bk:garden.bk,selectedDate:$stateParams.selectedDate},newparts,function(){Gardenpart.deleteParts({bk:garden.bk,selectedDate:$stateParams.selectedDate},delparts,function(){var filtered=gardenparts.filter(function(x){return newparts.indexOf(x)<0}),modified=[];for(i=0;i<filtered.length;i++)filtered[i].modified&&(delete filtered[i].modified,modified.push(filtered[i]));Gardenpart.updateParts({bk:garden.bk,selectedDate:$stateParams.selectedDate},modified,function(){$state.go("viewGarden",{bk:garden.bk,selectedDate:$scope.selectedDate})})})})},$scope.findOneVersion=function(){$scope.garden=Gardenversions.get({gardenId:$stateParams.gardenId,selectedDate:$stateParams.selectedDate}),Gardendata.setGarden($scope.garden),$scope.garden.$promise.then(function(garden){for(var gardenparts=garden.gardenparts,gardentop=parseInt(garden.elemtop),gardenleft=parseInt(garden.elemleft),i=0;i<gardenparts.length;i++)gardenparts[i].elemtop=parseInt(gardenparts[i].elemtop)-gardentop,gardenparts[i].elemleft=parseInt(gardenparts[i].elemleft)-gardenleft;$scope.gardenparts=gardenparts,$scope.$emit("gardenpartsLoaded")})},$scope.findVersions=function(){$scope.gardens=Gardenversions.query({selectedDate:null})}}]);
!function(){"use strict";function GardensListController(GardensService,$stateParams){var vm=this;if($stateParams.plant)vm.selectedDate=$stateParams.selectedDate,vm.plant=$stateParams.plant,vm.gardens=GardensService.getPlantGardens({selectedDate:$stateParams.selectedDate,plant:$stateParams.plant});else{var today=new Date;vm.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2),vm.gardens=GardensService.query()}}angular.module("gardens").controller("GardensListController",GardensListController),GardensListController.$inject=["GardensService","$stateParams"]}();
!function(){"use strict";function PlantGardenController($scope,$state,garden,Authentication,$stateParams,GardenpartsService,RuleSetsService){function cropgroupByCrop(crop){var cropgroup=!1;loop:for(var c=0;c<garden.ruleset.cropgroups.length;c++)for(var crops=garden.ruleset.cropgroups[c].crops,d=0;d<crops.length;d++)if(crops[d]._id===crop){cropgroup=garden.ruleset.cropgroups[c]._id;break loop}return cropgroup}function successCallback(res){var crop=garden.plantVariety.crop,cropgroup=cropgroupByCrop(crop);console.log("calculating the advice! crop: "+crop+" cropgroup: "+cropgroup);for(var pp=garden.pastplantings,j=0;j<pp.length;j++){var planting=pp[j];planting.elemtop=parseInt(planting.elemtop)-vm.garden.elemtop,planting.elemleft=parseInt(planting.elemleft)-vm.garden.elemleft,planting.cropgroup=cropgroupByCrop(planting.plantVariety.crop),planting.greenlevel=null,planting.redlevel=null;var yearsApart=new Date(new Date(vm.selectedDate)-new Date(planting.validTo)).getFullYear()-1970;if(console.log("years apart: "+yearsApart+" date:"+planting.validTo),planting.opacity=1-yearsApart*yearsApart/36,yearsApart<2&&cropgroup===planting.cropgroup)planting.greenlevel=0,planting.redlevel=255;else for(var rotationrules=vm.garden.ruleset.rotationrules,k=0;k<rotationrules.length;k++)console.log("cropgroup"+cropgroup+"rotationrules[k].cropgroup"+rotationrules[k].cropgroup),console.log("previousCropgroup:"+rotationrules[k].previousCropgroup+" planting.cropgroup: "+planting.cropgroup),cropgroup===rotationrules[k].cropgroup&&rotationrules[k].previousCropgroup===planting.cropgroup&&(console.log("rule applies, checking time"),rotationrules[k].yearsBetween>yearsApart?(planting.greenlevel=0,planting.redlevel=255):(planting.greenlevel=255,planting.redlevel=0))}}function errorCallback(res){vm.error=res.data.message}var vm=this;vm.garden=garden,vm.authentication=Authentication,vm.selectedDate=$stateParams.selectedDate,vm.plant=$stateParams.plant,vm.error=null,vm.form={},$scope.setDate=function(date){vm.selectedDate=date},vm.garden.ruleset=RuleSetsService.get({ruleSetId:garden.ruleset},successCallback,errorCallback)}angular.module("gardens").controller("PlantGardenController",PlantGardenController),PlantGardenController.$inject=["$scope","$state","gardenResolve","Authentication","$stateParams","GardenpartsService","RuleSetsService"]}();
"use strict";angular.module("gardens").controller("ToolboxController",["$scope","$rootScope","GardensService",function($scope,$rootScope,Gardens){$scope.addNewGardenpart=function(tool){$rootScope.$broadcast("addNewGardenpart",tool)};$scope.garden;$scope.toolboxInit=function(){}}]);
"use strict";angular.module("gardens").directive("calendar",["$state","$stateParams",function($state,$stateParams){return{require:"ngModel",link:function(scope,el,attr,ngModel){el.datepicker({changeMonth:!0,changeYear:!0,dateFormat:"yy-mm-dd",onSelect:function(dateText){scope.$apply(function(){ngModel.$setViewValue(dateText),scope.setDate(dateText);var mode=attr.calendar;return"plantGarden"===$state.current.name?(console.log("calendar $state.current.name :"+$state.current.name),void $state.go("plantGarden",{bk:scope.vm.garden.bk,selectedDate:dateText,plant:$stateParams.plant})):void("view"!==mode&&"edit"!==mode||$state.go("viewGarden",{bk:scope.vm.garden.bk,selectedDate:dateText}))})}})}}}]);
"use strict";angular.module("gardens").directive("dragtool",[function(){var draggableConfig={};return{restrict:"A",link:function(scope,elem,attrs){var css={"z-index":"1040",left:window.innerWidth/2,width:"240px"};elem.css(css),elem.draggable(draggableConfig),elem.addClass("col-md-2 panel panel-default dragtool"),elem.prepend('            <div class="panel-heading glyphicon glyphicon-move" style="width: 100%">'+attrs.dragtool+"</div>")}}}]);
"use strict";angular.module("gardens").directive("garden",["$state",function($state){var resizableConfig={grid:[5,5],handles:"all",containment:"parent"},draggableConfig={animate:!0,grid:[5,5],containment:"parent"};return{restrict:"A",link:function(scope,elem,attrs){scope.$on("updatedZoom",function(event,zoom){console.log("gardenDirective received zoom "+zoom),scope.vm.zoom=zoom});attrs.garden;if("createGarden"===$state.current.name)elem.addClass("creategarden"),elem.draggable(draggableConfig),scope.updateCoordinates(50,50,250,350),elem.on("drag",function(evt,ui){scope.updateCoordinates(ui.position.top,ui.position.left,elem.height(),elem.width()),scope.$apply()});else{var topmin=Number.MAX_VALUE,offsettop=Number.MIN_VALUE,leftmin=Number.MAX_VALUE,offsetleft=Number.MIN_VALUE;angular.forEach(scope.vm.garden.gardenparts,function(gardenpart,key){topmin>gardenpart.elemtop&&(topmin=gardenpart.elemtop),leftmin>gardenpart.elemleft&&(leftmin=gardenpart.elemleft);var partoffsettop=gardenpart.elemtop+gardenpart.elemheight;offsettop<partoffsettop&&(offsettop=partoffsettop);var partoffsetleft=gardenpart.elemleft+gardenpart.elemwidth;offsetleft<partoffsetleft&&(offsetleft=partoffsetleft)}),scope.minHeight=offsettop-topmin,scope.minWidth=offsetleft-leftmin,scope.initialMinHeight=offsettop-topmin,scope.initialMinWidth=offsetleft-leftmin,scope.initialTop=scope.vm.garden.elemtop,scope.initialLeft=scope.vm.garden.elemleft,scope.initialHeight=scope.vm.garden.elemheight,scope.initialWidth=scope.vm.garden.elemwidth,resizableConfig.minHeight=scope.minHeight,resizableConfig.minWidth=scope.minWidth}elem.resizable(resizableConfig),elem.on("resize",function(evt,ui){scope.updateCoordinates(ui.position.top,ui.position.left,ui.size.height,ui.size.width);"createGarden"!==$state.current.name&&(elem.resizable("option","minHeight",scope.minHeight),elem.resizable("option","minWidth",scope.minWidth),ui.size.height=scope.vm.garden.elemheight,ui.position.top=scope.vm.garden.elemtop,ui.size.width=scope.vm.garden.elemwidth,ui.position.left=scope.vm.garden.elemleft),scope.$apply()})}}}]);
"use strict";var getCoordinates=function(elem){var el=$(elem),co={};return co.top=el.css("top").replace("px",""),co.left=el.css("left").replace("px",""),co.height=el.css("height").replace("px",""),co.width=el.css("width").replace("px",""),co};angular.module("gardens").directive("gardenpart",["$timeout",function($timeout){return{restrict:"A",link:function(scope,elem,attrs){scope.popoverEvent=function(){$timeout(function(){console.log("popoverevent"),elem.trigger("customEvent")},0)};var updateCoordinates=function(){var co=getCoordinates(elem);scope.update(co.top,co.left,co.width,co.height),scope.$apply()},resizeStop=function(){scope.gardenpart.modified=!0,console.log("modified:"+JSON.stringify(scope.gardenpart)),updateCoordinates()};if(elem.addClass(scope.gardenpart.type),"layout"===attrs.gardenpart){var resizableConfig={containment:"#garden",autoHide:!1,snap:!0,snapmode:"outer",stop:resizeStop,resize:updateCoordinates};switch(scope.gardenpart.type){case"hweg":resizableConfig.minHeight=25,resizableConfig.maxHeight=60,resizableConfig.handles="n,s,e,w";break;case"vweg":resizableConfig.minWidth=25,resizableConfig.maxWidth=60,resizableConfig.handles="n,s,e,w";break;case"akke":resizableConfig.minHeight=50,resizableConfig.minWidth=50,resizableConfig.handles="n,s,e,w";break;case"vbed":resizableConfig.minWidth=60,resizableConfig.maxWidth=120,resizableConfig.handles="n,s,e,w";break;case"hbed":resizableConfig.minHeight=60,resizableConfig.maxHeight=120,resizableConfig.handles="n,s,w,e";break;default:console.log("you shouldnt get here default case in switch gardenpart directive"+JSON.stringify(scope.gardenpart))}if(elem.resizable(resizableConfig),elem.droppable(),"undefined"==typeof scope.gardenpart.bk){switch(scope.gardenpart.type){case"hweg":scope.update(0,0,150,30);break;case"vweg":scope.update(0,0,30,150);break;case"akke":scope.update(0,0,50,50);break;case"vbed":scope.update(0,0,100,200);break;case"hbed":scope.update(0,0,200,100);break;default:console.log("you shouldnt get here default case in switch gardenpart directive"+JSON.stringify(scope.gardenpart))}var draggableConfig={animate:!0,grid:[1,1],containment:"parent",revert:"valid",snap:".gardenpart ",snapmode:"outer"};draggableConfig.drag=updateCoordinates,elem.draggable(draggableConfig)}}}}}]);
"use strict";angular.module("gardens").directive("myenter",[function(){return{restrict:"A",link:function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.addKeeper()}),event.preventDefault())})}}}]);
"use strict";angular.module("gardens").directive("rulers",["$timeout","$window",function($timeout,$window){return{template:'<div class="ruler corner"></div><div class="ruler vRule1" ><div ng-repeat="vbox in vboxes" class="vRuleBox">{{vbox}}</div></div><div class="ruler vRule" ></div><div class="ruler hRule1" ><div ng-repeat="hbox in hboxes" class="hRuleBox">{{hbox}}</div></div><div class="ruler hRule"/>',restrict:"E",link:function(scope,element,attrs){var parent=element.parent(),render=function(zoom){"undefined"==typeof zoom&&(zoom=1),parent.height($window.innerHeight),scope.hboxes=[],scope.vboxes=[],$timeout(function(){scope.nrhbox=$window.innerWidth/50,scope.nrvbox=$window.innerHeight/50;var i;for(i=0;i<scope.nrhbox;i++)scope.hboxes.push(Math.round(50*i/zoom));for(i=0;i<scope.nrvbox;i++)scope.vboxes.push(Math.round(50*i/zoom));parent.css("background",'url("/modules/gardens/client/img/il-grid-trans.png") repeat scroll left top #fff')})};scope.$on("$destroy",function(event){parent.css("background","")}),render(),scope.$on("updatedZoom",function(event,zoom){render(zoom)})}}}]);
"use strict";angular.module("gardens").directive("toolbox",[function(){return{restrict:"A",link:function(scope,elem,attrs){var toolClicked=function(tool){return function(){scope.$apply(function(){scope.addNewGardenpart(tool)})}};elem.draggable();var hweg=$("#hweg").addClass("ui-toolbox-hweg ui-widget-content ");hweg.name="hweg",hweg.bind("click",toolClicked(hweg));var vweg=$("#vweg").addClass("ui-toolbox-vweg ui-widget-content ");vweg.name="vweg",vweg.bind("click",toolClicked(vweg));var hbed=$("#hbed").addClass("ui-toolbox-hbed ui-widget-content ");hbed.name="hbed",hbed.bind("click",toolClicked(hbed));var vbed=$("#vbed").addClass("ui-toolbox-vbed ui-widget-content ");vbed.name="vbed",vbed.bind("click",toolClicked(vbed));var akke=$("#akke").addClass("ui-toolbox-akke ui-widget-content ");akke.name="akke",akke.bind("click",toolClicked(akke))}}}]);
"use strict";angular.module("gardens").factory("Gardendata",[function(){var garden,error;return{setGarden:function(arg){garden=arg},getGarden:function(){return garden},setError:function(arg){error=arg},getError:function(){return error}}}]);
!function(){"use strict";function GardenpartsService($resource,$stateParams){return $resource("/api/gardenparts/:bk/:selectedDate",{bk:"@bk",selectedDate:$stateParams.selectedDate},{createParts:{method:"PUT",isArray:!0},updateParts:{method:"POST",isArray:!0},deleteParts:{method:"POST",url:"/api/gardenparts/delete/:bk/:selectedDate",isArray:!0}})}angular.module("gardens.services").factory("GardenpartsService",GardenpartsService),GardenpartsService.$inject=["$resource","$stateParams"]}();
!function(){"use strict";function GardensService($resource,$stateParams){return $resource("/api/gardens/:bk/:selectedDate/:plant",{bk:"@bk",selectedDate:$stateParams.selectedDate,plant:$stateParams.plant},{update:{method:"PUT"},getPlantGardens:{url:"/api/gardens/plant/:selectedDate/:plant",method:"GET",isArray:!0}})}angular.module("gardens.services").factory("GardensService",GardensService),GardensService.$inject=["$resource","$stateParams"]}();
"use strict";angular.module("gardens").factory("Gardenversions",["$resource","$stateParams",function($resource,$stateParams){if(void 0===$stateParams.selectedDate){var today=new Date;$stateParams.selectedDate=today.getFullYear()+"-"+(today.getMonth()+1)+"-"+today.getDate()}return console.log("gardenversions service statedate: "+$stateParams.selectedDate),$resource("/api/gardenversions/:gardenId/:selectedDate",{gardenId:"@_id",selectedDate:"@selectedDate"},{update:{method:"PUT"}})}]);
"use strict";angular.module("harvests").config(["$stateProvider",function($stateProvider){$stateProvider.state("listHarvests",{url:"/harvests",templateUrl:"/modules/harvests/views/list-harvests.client.view.html"}).state("createHarvest",{url:"/harvests/create",templateUrl:"/modules/harvests/views/create-harvest.client.view.html"}).state("viewHarvest",{url:"/harvests/:harvestId",templateUrl:"/modules/harvests/views/view-harvest.client.view.html"}).state("editHarvest",{url:"/harvests/:harvestId/edit",templateUrl:"/modules/harvests/views/edit-harvest.client.view.html"})}]);
"use strict";angular.module("harvests").controller("HarvestsController",["$scope","$uibModalInstance","$stateParams","$location","Authentication","Harvests","planting",function($scope,$uibModalInstance,$stateParams,$location,Authentication,Harvests,planting){$scope.newHarvest=function(){console.log("planting in harvest: "+JSON.stringify(planting)),$scope.planting=planting,$scope.harvest={},$scope.harvest.issues=[],$scope.harvest.gotchas=[],$scope.newIssue(),$scope.newGotcha()},$scope.newIssue=function(){var issue={};issue.plantvariety=planting.plantVariety,$scope.harvest.issues.push(issue)},$scope.newGotcha=function(){var gotcha={};gotcha.plantvariety=planting.plantVariety,$scope.harvest.gotchas.push(gotcha)},$scope.authentication=Authentication,$scope.create=function(){console.log("plantvarid: "+planting.plantVariety._id),planting.validTo=$stateParams.selectedDate;var i,har=$scope.harvest;for(i=0;i<har.issues.length;i++)har.issues[i].plantvariety=har.issues[i].plantvariety._id;for(i=0;i<har.gotchas.length;i++)har.gotchas[i].plantvariety=har.gotchas[i].plantvariety._id;var harvest=new Harvests({garden:planting.garden,planting:planting._id,quantity:har.quantity,unit:har.unit,issues:har.issues,gotchas:har.gotchas,date:$stateParams.selectedDate});$uibModalInstance.close(harvest)},$scope.remove=function(harvest){if(harvest){harvest.$remove();for(var i in $scope.harvests)$scope.harvests[i]===harvest&&$scope.harvests.splice(i,1)}else $scope.harvest.$remove(function(){$location.path("harvests")})},$scope.update=function(){var harvest=$scope.harvest;harvest.$update(function(){$location.path("harvests/"+harvest._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.harvests=Harvests.query()},$scope.findOne=function(){$scope.harvest=Harvests.get({harvestId:$stateParams.harvestId})}}]);
"use strict";angular.module("harvests").factory("Harvests",["$resource",function($resource){return $resource("/api/harvests/:harvestId",{harvestId:"@_id"},{update:{method:"PUT"}})}]);
!function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Messages",state:"admin.messages.list"})}angular.module("messages.admin").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.messages.list",{url:"",templateUrl:"/modules/messages/client/views/admin/list-messages.client.view.html",controller:"MessagesAdminListController",controllerAs:"vm",data:{roles:["admin"]}}).state("admin.messages.create",{url:"/create",templateUrl:"/modules/messages/client/views/admin/form-message.client.view.html",controller:"MessagesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{messageResolve:newMessage}}).state("admin.messages.edit",{url:"/:messageId/edit",templateUrl:"/modules/messages/client/views/admin/form-message.client.view.html",controller:"MessagesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{messageResolve:getMessage}})}function getMessage($stateParams,MessagesService){return MessagesService.get({messageId:$stateParams.messageId}).$promise}function newMessage(MessagesService){return new MessagesService}angular.module("messages.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getMessage.$inject=["$stateParams","MessagesService"],newMessage.$inject=["MessagesService"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"messages",state:"messages",type:"dropdown",roles:["user"]}),menuService.addSubMenuItem("topbar","messages",{title:"list_messages",state:"messages.list",roles:["user"]})}angular.module("messages").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("messages",{abstract:!0,url:"/messages",template:"<ui-view/>"}).state("messages.list",{url:"",templateUrl:"/modules/messages/client/views/list-messages.client.view.html",controller:"MessagesListController",controllerAs:"vm",data:{pageTitle:"Messages List"}}).state("messages.view",{url:"/:messageId",templateUrl:"/modules/messages/client/views/view-message.client.view.html",controller:"MessagesController",controllerAs:"vm",resolve:{messageResolve:getMessage},data:{pageTitle:"Message {{ messageResolve.title }}"}})}function getMessage($stateParams,MessagesService){return MessagesService.get({messageId:$stateParams.messageId}).$promise}angular.module("messages.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getMessage.$inject=["$stateParams","MessagesService"]}();
!function(){"use strict";function MessagesListController(MessagesService){var vm=this;vm.messages=MessagesService.query()}angular.module("messages").controller("MessagesListController",MessagesListController),MessagesListController.$inject=["MessagesService"]}();
!function(){"use strict";function MessagesController($scope,message,Authentication){var vm=this;vm.message=message,vm.authentication=Authentication,vm.error=null}angular.module("messages").controller("MessagesController",MessagesController),MessagesController.$inject=["$scope","messageResolve","Authentication"]}();
!function(){"use strict";function MessagesService($resource){function createOrUpdate(message){function onSuccess(message){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return message._id?message.$update(onSuccess,onError):message.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Message=$resource("/api/messages/:messageId",{messageId:"@_id"},{update:{method:"PUT"}});return angular.extend(Message.prototype,{createOrUpdate:function(){var message=this;return createOrUpdate(message)}}),Message}angular.module("messages.services").factory("MessagesService",MessagesService),MessagesService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","system",{title:"list_plant_families",state:"plantfamilies.list"})}angular.module("plantfamilies").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("plantfamilies",{abstract:!0,url:"/plantfamilies",template:"<ui-view/>"}).state("plantfamilies.list",{url:"",templateUrl:"/modules/plant-families/client/views/list-plant-families.client.view.html",controller:"PlantFamiliesListController",controllerAs:"vm",data:{pageTitle:"Plant families list"}}).state("plantfamilies.create",{url:"/create",templateUrl:"/modules/plant-families/client/views/form-plant-family.client.view.html",controller:"PlantFamiliesController",controllerAs:"vm",resolve:{plantFamilyResolve:newPlantFamily},data:{roles:["user","admin"],pageTitle:"Add plant family"}}).state("plantfamilies.edit",{url:"/:plantFamilyId/edit",templateUrl:"/modules/plant-families/client/views/form-plant-family.client.view.html",controller:"PlantFamiliesController",controllerAs:"vm",resolve:{plantFamilyResolve:getPlantFamily},data:{roles:["user","admin"],pageTitle:"Edit plant family {{ plantFamilyResolve.name }}"}}).state("plantfamilies.view",{url:"/:plantFamilyId",templateUrl:"/modules/plant-families/client/views/view-plant-family.client.view.html",controller:"PlantFamiliesController",controllerAs:"vm",resolve:{plantFamilyResolve:getPlantFamily},data:{pageTitle:"Plant family {{ plantFamilyResolve.name }}"}})}function getPlantFamily($stateParams,PlantFamilyService){return PlantFamilyService.get({plantFamilyId:$stateParams.plantFamilyId}).$promise}function newPlantFamily(PlantFamilyService){return new PlantFamilyService}angular.module("plantfamilies.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getPlantFamily.$inject=["$stateParams","PlantFamilyService"],newPlantFamily.$inject=["PlantFamilyService"]}();
!function(){"use strict";function PlantFamiliesListController(PlantFamilyService){var vm=this;vm.plantfamilies=PlantFamilyService.query()}angular.module("plantfamilies").controller("PlantFamiliesListController",PlantFamiliesListController),PlantFamiliesListController.$inject=["PlantFamilyService"]}();
!function(){"use strict";function PlantFamiliesController($scope,$state,$window,plantfamily,Authentication,CropsService){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.plantfamily.$remove($state.go("plantfamilies.list"))}function save(isValid){function successCallback(res){$state.go("plantfamilies.view",{plantFamilyId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.plantfamily._id?vm.plantfamily.$update(successCallback,errorCallback):vm.plantfamily.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.plantFamilyForm"),!1)}var vm=this;vm.plantfamily=plantfamily,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,"plantfamilies.view"===$state.current.name&&(vm.crops=CropsService.getFamily({familyId:vm.plantfamily._id}))}angular.module("plantfamilies").controller("PlantFamiliesController",PlantFamiliesController),PlantFamiliesController.$inject=["$scope","$state","$window","plantFamilyResolve","Authentication","CropsService"]}();
!function(){"use strict";function PlantFamilyService($resource){return $resource("/api/plant-families/:plantFamilyId",{plantFamilyId:"@_id"},{update:{method:"PUT"}})}angular.module("plantfamilies.services").factory("PlantFamilyService",PlantFamilyService),PlantFamilyService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"plant_varieties",state:"plant-varieties",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","plant-varieties",{title:"list_varieties",state:"plant-varieties.list"}),Menus.addSubMenuItem("topbar","plant-varieties",{title:"Variëteit toevoegen",state:"plant-varieties.create",roles:["user"]})}angular.module("plant-varieties").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("plant-varieties",{abstract:!0,url:"/plant-varieties",template:"<ui-view/>"}).state("plant-varieties.list",{url:"",templateUrl:"/modules/plant-varieties/client/views/list-plant-varieties.client.view.html",controller:"PlantVarietiesListController",controllerAs:"vm",data:{pageTitle:"Plant varieties list"}}).state("plant-varieties.create",{url:"/create",templateUrl:"/modules/plant-varieties/client/views/form-plant-variety.client.view.html",controller:"PlantVarietiesController",controllerAs:"vm",resolve:{plantVarietyResolve:newPlantVariety},data:{roles:["user","admin"],pageTitle:"Add plant variety"}}).state("plant-varieties.edit",{url:"/:plantVarietyId/edit",templateUrl:"/modules/plant-varieties/client/views/form-plant-variety.client.view.html",controller:"PlantVarietiesController",controllerAs:"vm",resolve:{plantVarietyResolve:getPlantVariety},data:{roles:["user","admin"],pageTitle:"Edit plant variety {{ plantVarietyResolve.title }}"}}).state("plant-varieties.view",{url:"/:plantVarietyId",templateUrl:"/modules/plant-varieties/client/views/view-plant-variety.client.view.html",controller:"ViewVarietyController",controllerAs:"vm",resolve:{plantVarietyResolve:getPlantVarietyWithCrop},data:{pageTitle:"Plant variety {{ plantVarietyResolve.title }}"}})}function getPlantVarietyWithCrop($stateParams,PlantVarietiesService){return PlantVarietiesService.getWithCrop({varietyId:$stateParams.plantVarietyId}).$promise}function getPlantVariety($stateParams,PlantVarietiesService){return PlantVarietiesService.get({plantVarietyId:$stateParams.plantVarietyId}).$promise}function newPlantVariety(PlantVarietiesService){return new PlantVarietiesService}angular.module("plant-varieties.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getPlantVarietyWithCrop.$inject=["$stateParams","PlantVarietiesService"],getPlantVariety.$inject=["$stateParams","PlantVarietiesService"],newPlantVariety.$inject=["PlantVarietiesService"]}();
!function(){"use strict";function PlantVarietiesListController($filter,PlantVarietiesService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=15,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.plantvarieties,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,PlantVarietiesService.query(function(data){vm.plantvarieties=data,vm.buildPager()})}angular.module("plant-varieties").controller("PlantVarietiesListController",PlantVarietiesListController),PlantVarietiesListController.$inject=["$filter","PlantVarietiesService"]}();
!function(){"use strict";function PlantVarietiesController($scope,$state,$timeout,$window,plantvariety,Authentication,CropsService,FileUploader,Cropper){function showCropper(){$scope.$broadcast($scope.showEvent)}function save(isValid){function successCallback(res){$state.go("plant-varieties.view",{plantVarietyId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.plantvariety._id?vm.plantvariety.$update(successCallback,errorCallback):vm.plantvariety.$save(successCallback,errorCallback)):(console.log("save!"),$scope.$broadcast("show-errors-check-validity","vm.form.plantvarietyForm"),!1)}var vm=this;vm.plantvariety=plantvariety,vm.authentication=Authentication,vm.error=null,vm.form={},vm.save=save,vm.crops=CropsService.query();var file,data;$scope.options={maximize:!0,aspectRatio:1,crop:function(dataNew){data=dataNew,$scope.scale(128)}},$scope.preview=function(){file&&data&&Cropper.crop(file,data).then(Cropper.encode).then(function(dataUrl){(vm.plantvariety||(vm.plantvariety={})).image=dataUrl})},$scope.scale=function(width){Cropper.crop(file,data).then(function(blob){return Cropper.scale(blob,{width:width})}).then(Cropper.encode).then(function(dataUrl){(vm.plantvariety||(vm.plantvariety={})).image=dataUrl})},$scope.showEvent="show",$scope.hideEvent="hide",$scope.uploader=new FileUploader,$scope.uploader.onAfterAddingFile=function(fileItem){Cropper.encode(file=fileItem._file).then(function(dataUrl){$scope.dataUrl=dataUrl,$timeout(showCropper)})}}angular.module("plant-varieties").controller("PlantVarietiesController",PlantVarietiesController),PlantVarietiesController.$inject=["$scope","$state","$timeout","$window","plantVarietyResolve","Authentication","CropsService","FileUploader","Cropper"]}();
!function(){"use strict";function ViewVarietyController(Authentication,CropsService,plantvariety){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.plantvariety.$remove($state.go("plant-varieties.list"))}var vm=this;vm.plantvariety=plantvariety,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove;var year=(new Date).getFullYear(),dateStart=new Date(year,0);vm.DOYstartSow=new Date(dateStart.setDate(plantvariety.DOYstartSow));var dateEnd=new Date(year,0);vm.DOYendSow=new Date(dateEnd.setDate(plantvariety.DOYendSow));var today=new Date;vm.DOYendSow<today?(console.log("Zaaien is al voorbij vm.DOYendSow: "+vm.DOYendSow+"< today: "+today),vm.selectedDate=vm.DOYstartSow.getFullYear()+1+"-"+("0"+(vm.DOYstartSow.getMonth()+1)).substr(-2)+"-"+("0"+vm.DOYstartSow.getDate()).substr(-2)):vm.DOYstartSow<today?(console.log("Zaaien is al begonnen neem vandaag"),vm.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2)):(console.log(" vm.DOYendSow: "+vm.DOYendSow+">= today: "+today),console.log(" vm.DOYstartSow: "+vm.DOYstartSow+">= today: "+today),console.log("Zaaien is al nog niet begonnen neem dit jaar zaaiperiode start"),vm.selectedDate=vm.DOYstartSow.getFullYear()+"-"+("0"+(vm.DOYstartSow.getMonth()+1)).substr(-2)+"-"+("0"+vm.DOYstartSow.getDate()).substr(-2))}angular.module("plant-varieties").controller("ViewVarietyController",ViewVarietyController),ViewVarietyController.$inject=["Authentication","CropsService","plantVarietyResolve"]}();
"use strict";angular.module("plant-varieties").directive("doypicker",[function(){return{require:"ngModel",link:function(scope,el,attr,ngModel){$(el).datepicker({dateFormat:"o"})}}}]);
!function(){"use strict";function PlantVarietiesService($resource){return $resource("/api/plant-varieties/:plantVarietyId",{plantVarietyId:"@_id"},{update:{method:"PUT"},getCrop:{method:"GET",url:"/api/plant-varieties/get-crop/:cropId",isArray:!0},getWithCrop:{method:"GET",url:"/api/plant-varieties/with-crop/:varietyId"}})}angular.module("plant-varieties.services").factory("PlantVarietiesService",PlantVarietiesService),PlantVarietiesService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addSubMenuItem("topbar","system",{title:"list_rule_sets",state:"rulesets.list"})}angular.module("rule-sets").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("rulesets",{abstract:!0,url:"/rulesets",template:"<ui-view/>"}).state("rulesets.list",{url:"",templateUrl:"/modules/rule-sets/client/views/list-rule-sets.client.view.html",controller:"RuleSetsListController",controllerAs:"vm",data:{pageTitle:"rule_set_list"}}).state("rulesets.create",{url:"/create",templateUrl:"/modules/rule-sets/client/views/form-rule-set.client.view.html",controller:"RuleSetsController",controllerAs:"vm",resolve:{ruleSetResolve:newRuleset},data:{roles:["user","admin"],pageTitle:"add_rule_set"}}).state("rulesets.edit",{url:"/:ruleSetId/edit",templateUrl:"/modules/rule-sets/client/views/form-rule-set.client.view.html",controller:"RuleSetsController",controllerAs:"vm",resolve:{ruleSetResolve:getRuleSet},data:{roles:["user","admin"],pageTitle:"edit_rule_set"}}).state("rulesets.view",{url:"/:ruleSetId",templateUrl:"/modules/rule-sets/client/views/view-rule-set.client.view.html",controller:"RuleSetsController",controllerAs:"vm",resolve:{ruleSetResolve:getRuleSet},data:{pageTitle:"view_rule_set"}})}function getRuleSet($stateParams,RuleSetsService){return RuleSetsService.get({ruleSetId:$stateParams.ruleSetId}).$promise}function newRuleset(RuleSetsService){return new RuleSetsService}angular.module("rule-sets.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getRuleSet.$inject=["$stateParams","RuleSetsService"],newRuleset.$inject=["RuleSetsService"]}();
!function(){"use strict";function RuleSetsListController(RuleSetsService){var vm=this;vm.rulesets=RuleSetsService.query()}angular.module("rule-sets").controller("RuleSetsListController",RuleSetsListController),RuleSetsListController.$inject=["RuleSetsService"]}();
!function(){"use strict";function RuleSetsController($scope,$state,$window,ruleset,Authentication,Crops){function removeRule(index){console.log("remove rule:"+index),vm.ruleset.rotationrules.splice(index,1)}function removeGroup(index){console.log("removeGroup:"+index);for(var count=0,cropgroup=vm.ruleset.cropgroups[index];count!==vm.ruleset.rotationrules.length;)vm.ruleset.rotationrules[count].previousCropgroup===cropgroup._id||vm.ruleset.rotationrules[count].cropgroup===cropgroup._id?vm.ruleset.rotationrules.splice(count,1):count++;for(;vm.ruleset.cropgroups[index].crops.length>0;)vm.ordercrops.push(vm.ruleset.cropgroups[index].crops.pop());vm.ruleset.cropgroups.splice(index,1)}function newCropgroup(name){var cropgroup={};return void 0===name?cropgroup.name="Geef de groep een naam":cropgroup.name=name,cropgroup.crops=[],vm.ruleset.cropgroups.push(cropgroup),cropgroup}function newRule(){var rule={};vm.ruleset.rotationrules.push(rule)}function remove(){$window.confirm("Are you sure you want to delete?")&&vm.ruleset.$remove($state.go("rulesets.list"))}function save(isValid){function successCallback(res){$state.go("rulesets.view",{ruleSetId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.ruleset._id?vm.ruleset.$update(successCallback,errorCallback):vm.ruleset.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.rulesetForm"),!1)}var vm=this;vm.ruleset=ruleset,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.removeGroup=removeGroup,vm.removeRule=removeRule,vm.crops=Crops.query(),vm.crops.$promise.then(function(crops){var cropgroup;if(ruleset._id){for(var l=0;l<vm.ruleset.cropgroups.length;l++){cropgroup=vm.ruleset.cropgroups[l];for(var k=0;k<cropgroup.crops.length;k++){var index=crops.indexOf(cropgroup.crops[k]);crops.splice(index,1)}}vm.ordercrops=crops}else{console.log("nieuwe ruleset"),vm.ruleset.cropgroups=[],vm.ruleset.rotationrules=[],newRule();loop:for(var i=0;i<crops.length;i++){for(var j=0;j<vm.ruleset.cropgroups.length;j++)if(vm.ruleset.cropgroups[j].name===crops[i].plantfamily.name){vm.ruleset.cropgroups[j].crops.push(crops[i]);continue loop}cropgroup=newCropgroup(crops[i].plantfamily.name),cropgroup.crops.push(crops[i])}}}),$scope.newCropgroup=newCropgroup,$scope.newRule=newRule}angular.module("rule-sets").controller("RuleSetsController",RuleSetsController),RuleSetsController.$inject=["$scope","$state","$window","ruleSetResolve","Authentication","CropsService"]}();
"use strict";angular.module("rule-sets").directive("toNumber",function(){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$parsers.push(function(val){return parseInt(val,10)}),ngModel.$formatters.push(function(val){return""+val})}}});
"use strict";angular.module("rule-sets.services").factory("RuleSetsService",["$resource",function($resource){return $resource("/api/rule-sets/:ruleSetId",{ruleSetId:"@_id"},{update:{method:"PUT"}})}]);

!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.tasks",{abstract:!0,url:"/tasks",template:"<ui-view/>"}).state("admin.tasks.list",{url:"",templateUrl:"/modules/tasks/client/views/admin/list-tasks.client.view.html",controller:"TasksAdminListController",controllerAs:"vm",data:{roles:["admin"]}}).state("admin.tasks.create",{url:"/create",templateUrl:"/modules/tasks/client/views/admin/form-task.client.view.html",controller:"TasksAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{taskResolve:newTask}}).state("admin.tasks.edit",{url:"/:taskId/edit",templateUrl:"/modules/tasks/client/views/admin/form-task.client.view.html",controller:"TasksAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{taskResolve:getTask}})}function getTask($stateParams,TasksService){return TasksService.get({taskId:$stateParams.taskId}).$promise}function newTask(TasksService){return new TasksService}angular.module("tasks.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getTask.$inject=["$stateParams","TasksService"],newTask.$inject=["TasksService"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"tasks",state:"tasks",type:"dropdown",roles:["user"]}),menuService.addSubMenuItem("topbar","tasks",{title:"list_tasks",state:"tasks.list",roles:["user"]})}angular.module("tasks").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("tasks",{abstract:!0,url:"/tasks",template:"<ui-view/>"}).state("tasks.list",{url:"",templateUrl:"/modules/tasks/client/views/list-tasks.client.view.html",controller:"TasksListController",controllerAs:"vm",data:{pageTitle:"Tasks List"}}).state("tasks.confirm",{url:"/confirmFinished/:taskId",templateUrl:"/modules/tasks/client/views/list-tasks.client.view.html",controller:"TasksListController",controllerAs:"vm",data:{pageTitle:"Tasks List"}}).state("tasks.view",{url:"/:taskId",templateUrl:"/modules/tasks/client/views/view-task.client.view.html",controller:"TasksController",controllerAs:"vm",resolve:{taskResolve:getTask},data:{pageTitle:"Task {{ taskResolve.title }}"}})}function getTask($stateParams,TasksService){return TasksService.get({taskId:$stateParams.taskId}).$promise}angular.module("tasks.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getTask.$inject=["$stateParams","TasksService"]}();
!function(){"use strict";function TasksListController(TasksService){var vm=this,data=TasksService.query();data.$promise.then(function(){vm.tasks=data.tasks,vm.varieties={};for(var i=0;i<data.varieties.length;i++)vm.varieties[data.varieties[i]._id]=data.varieties[i]})}angular.module("tasks").controller("TasksListController",TasksListController),TasksListController.$inject=["TasksService"]}();
!function(){"use strict";function TasksController($scope,task,Authentication){var vm=this;vm.task=task,vm.step=task.cultivationPlan.steps[task.step],vm.authentication=Authentication,vm.error=null,$scope.confirmTask=function(){console.log("confirm task: "+task),task.$confirm()}}angular.module("tasks").controller("TasksController",TasksController),TasksController.$inject=["$scope","taskResolve","Authentication"]}();
!function(){"use strict";function TasksService($resource){function createOrUpdate(task){function onSuccess(task){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return task._id?task.$update(onSuccess,onError):task.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Task=$resource("/api/tasks/:taskId",{taskId:"@_id"},{update:{method:"PUT"},confirm:{method:"POST"},query:{isArray:!1}});return angular.extend(Task.prototype,{createOrUpdate:function(){var task=this;return createOrUpdate(task)}}),Task}angular.module("tasks.services").factory("TasksService",TasksService),TasksService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addSubMenuItem("topbar","system",{title:"Manage Users",state:"admin.users",roles:["admin"]})}angular.module("users.admin").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){function getUser($stateParams,AdminService){return AdminService.get({userId:$stateParams.userId}).$promise}$stateProvider.state("admin.users",{url:"/users",templateUrl:"/modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController",controllerAs:"vm",data:{pageTitle:"Users List"}}).state("admin.user",{url:"/users/:userId",templateUrl:"/modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit {{ userResolve.displayName }}"}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"/modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit User {{ userResolve.displayName }}"}}),getUser.$inject=["$stateParams","AdminService"]}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("settings",{abstract:!0,url:"/settings",templateUrl:"/modules/users/client/views/settings/settings.client.view.html",controller:"SettingsController",controllerAs:"vm",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"/modules/users/client/views/settings/edit-profile.client.view.html",controller:"EditProfileController",controllerAs:"vm",data:{pageTitle:"Settings"}}).state("settings.password",{url:"/password",templateUrl:"/modules/users/client/views/settings/change-password.client.view.html",controller:"ChangePasswordController",controllerAs:"vm",data:{pageTitle:"Settings password"}}).state("settings.accounts",{url:"/accounts",templateUrl:"/modules/users/client/views/settings/manage-social-accounts.client.view.html",controller:"SocialAccountsController",controllerAs:"vm",data:{pageTitle:"Settings accounts"}}).state("settings.picture",{url:"/picture",templateUrl:"/modules/users/client/views/settings/change-profile-picture.client.view.html",controller:"ChangeProfilePictureController",controllerAs:"vm",data:{pageTitle:"Settings picture"}}).state("authentication",{abstract:!0,url:"/authentication",templateUrl:"/modules/users/client/views/authentication/authentication.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}).state("authentication.signup",{url:"/signup",templateUrl:"/modules/users/client/views/authentication/signup.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signup"}}).state("authentication.signin",{url:"/signin?err",templateUrl:"/modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signin"}}).state("password",{abstract:!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"/modules/users/client/views/password/forgot-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password forgot"}}).state("password.reset",{abstract:!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"/modules/users/client/views/password/reset-password-invalid.client.view.html",data:{pageTitle:"Password reset invalid"}}).state("password.reset.success",{url:"/success",templateUrl:"/modules/users/client/views/password/reset-password-success.client.view.html",data:{pageTitle:"Password reset success"}}).state("password.reset.form",{url:"/:token",templateUrl:"/modules/users/client/views/password/reset-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password reset form"}})}angular.module("users.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function AuthenticationController($scope,$state,UsersService,$location,$window,Authentication,PasswordValidator,Notification){function signup(isValid){return isValid?void UsersService.userSignup(vm.credentials).then(onUserSignupSuccess).catch(onUserSignupError):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function signin(isValid){return isValid?void UsersService.userSignin(vm.credentials).then(onUserSigninSuccess).catch(onUserSigninError):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function callOauthProvider(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}function onUserSignupSuccess(response){vm.authentication.user=response,Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Signup successful!'}),$state.go($state.previous.state.name||"home",$state.previous.params)}function onUserSignupError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Signup Error!',delay:6e3})}function onUserSigninSuccess(response){vm.authentication.user=response,Notification.info({message:"Welcome "+response.firstName}),$state.go($state.previous.state.name||"home",$state.previous.params)}function onUserSigninError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Signin Error!',delay:6e3})}var vm=this;vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.signup=signup,vm.signin=signin,vm.callOauthProvider=callOauthProvider,vm.usernameRegex=/^(?=[\w.-]+$)(?!.*[._-]{2})(?!\.)(?!.*\.$).{3,34}$/,$location.search().err&&Notification.error({message:$location.search().err}),vm.authentication.user&&$location.path("/")}angular.module("users").controller("AuthenticationController",AuthenticationController),AuthenticationController.$inject=["$scope","$state","UsersService","$location","$window","Authentication","PasswordValidator","Notification"]}();
!function(){"use strict";function PasswordController($scope,$stateParams,UsersService,$location,Authentication,PasswordValidator,Notification){function askForPasswordReset(isValid){return isValid?void UsersService.requestPasswordReset(vm.credentials).then(onRequestPasswordResetSuccess).catch(onRequestPasswordResetError):($scope.$broadcast("show-errors-check-validity","vm.forgotPasswordForm"),!1)}function resetUserPassword(isValid){return isValid?void UsersService.resetPassword($stateParams.token,vm.passwordDetails).then(onResetPasswordSuccess).catch(onResetPasswordError):($scope.$broadcast("show-errors-check-validity","vm.resetPasswordForm"),!1)}function onRequestPasswordResetSuccess(response){vm.credentials=null,Notification.success({message:response.message,title:'<i class="glyphicon glyphicon-ok"></i> Password reset email sent successfully!'})}function onRequestPasswordResetError(response){vm.credentials=null,Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Failed to send password reset email!',delay:4e3})}function onResetPasswordSuccess(response){vm.passwordDetails=null,Authentication.user=response,Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Password reset successful!'}),$location.path("/password/reset/success")}function onResetPasswordError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Password reset failed!',delay:4e3})}var vm=this;vm.resetUserPassword=resetUserPassword,vm.askForPasswordReset=askForPasswordReset,vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.authentication.user&&$location.path("/")}angular.module("users").controller("PasswordController",PasswordController),PasswordController.$inject=["$scope","$stateParams","UsersService","$location","Authentication","PasswordValidator","Notification"]}();
!function(){"use strict";function passwordValidator(PasswordValidator){function link(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.getPopoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.getPopoverMsg="",scope.passwordErrors=[],status=!0)}return status}}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("passwordValidator",passwordValidator),passwordValidator.$inject=["PasswordValidator"]}();
!function(){"use strict";function passwordVerify(){function link(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}var directive={require:"ngModel",scope:{passwordVerify:"="},link:link};return directive}angular.module("users").directive("passwordVerify",passwordVerify)}();
!function(){"use strict";function lowercase(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("lowercase",lowercase)}();
!function(){"use strict";function Authentication($window){var auth={user:$window.user};return auth}angular.module("users.services").factory("Authentication",Authentication),Authentication.$inject=["$window"]}();
!function(){"use strict";function PasswordValidator($window){function getResult(password){var result=owaspPasswordStrengthTest.test(password);return result}function getPopoverMsg(){var popoverMsg="Please enter a passphrase or password with "+owaspPasswordStrengthTest.configs.minLength+" or more characters, numbers, lowercase, uppercase, and special characters.";return popoverMsg}var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest,service={getResult:getResult,getPopoverMsg:getPopoverMsg};return service}angular.module("users.services").factory("PasswordValidator",PasswordValidator),PasswordValidator.$inject=["$window"]}();
!function(){"use strict";function UsersService($resource){var Users=$resource("/api/users",{},{update:{method:"PUT"},get:{url:"/api/users/id/:name"},updatePassword:{method:"POST",url:"/api/users/password"},deleteProvider:{method:"DELETE",url:"/api/users/accounts",params:{provider:"@provider"}},sendPasswordResetToken:{method:"POST",url:"/api/auth/forgot"},resetPasswordWithToken:{method:"POST",url:"/api/auth/reset/:token"},signup:{method:"POST",url:"/api/auth/signup"},signin:{method:"POST",url:"/api/auth/signin"}});return angular.extend(Users,{changePassword:function(passwordDetails){return this.updatePassword(passwordDetails).$promise},removeSocialAccount:function(provider){return this.deleteProvider({provider:provider}).$promise},requestPasswordReset:function(credentials){return this.sendPasswordResetToken(credentials).$promise},resetPassword:function(token,passwordDetails){return this.resetPasswordWithToken({token:token},passwordDetails).$promise},userSignup:function(credentials){return this.signup(credentials).$promise},userSignin:function(credentials){return this.signin(credentials).$promise}}),Users}function AdminService($resource){return $resource("/api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}angular.module("users.services").factory("UsersService",UsersService),UsersService.$inject=["$resource"],angular.module("users.admin.services").factory("AdminService",AdminService),AdminService.$inject=["$resource"]}();
!function(){"use strict";function ArticlesAdminController($scope,$state,$window,article,Authentication,Notification){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.article.$remove(function(){$state.go("admin.articles.list"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Article deleted successfully!'})})}function save(isValid){function successCallback(res){$state.go("admin.articles.list"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Article saved successfully!'})}function errorCallback(res){Notification.error({message:res.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Article save error!'})}return isValid?void vm.article.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.articleForm"),!1)}var vm=this;vm.article=article,vm.authentication=Authentication,vm.form={},vm.remove=remove,vm.save=save}angular.module("articles.admin").controller("ArticlesAdminController",ArticlesAdminController),ArticlesAdminController.$inject=["$scope","$state","$window","articleResolve","Authentication","Notification"]}();
!function(){"use strict";function ArticlesAdminListController(ArticlesService){var vm=this;vm.articles=ArticlesService.query()}angular.module("articles.admin").controller("ArticlesAdminListController",ArticlesAdminListController),ArticlesAdminListController.$inject=["ArticlesService"]}();
!function(){"use strict";function authInterceptor($q,$injector,Authentication){function responseError(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 400:$injector.get("$state").go("bad-request",{message:rejection.data.message});break;case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden");break;case 404:$injector.get("$state").go("not-found",{message:rejection.data.message});break;case-1:var Notification=$injector.get("Notification");Notification.error({message:"No response received from server. Please try again later.",title:"Error processing request!",delay:5e3})}return $q.reject(rejection)}var service={responseError:responseError};return service}angular.module("core").factory("authInterceptor",authInterceptor),authInterceptor.$inject=["$q","$injector","Authentication"]}();
!function(){"use strict";function FriendsAdminController($scope,$state,$window,friend,Authentication,Notification){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.friend.$remove(function(){$state.go("admin.friends.list"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Friend deleted successfully!'})})}function save(isValid){function successCallback(res){$state.go("admin.friends.list"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Friend saved successfully!'})}function errorCallback(res){Notification.error({message:res.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Friend save error!'})}return isValid?void vm.friend.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.friendForm"),!1)}var vm=this;vm.friend=friend,vm.authentication=Authentication,vm.form={},vm.remove=remove,vm.save=save}angular.module("friends.admin").controller("FriendsAdminController",FriendsAdminController),FriendsAdminController.$inject=["$scope","$state","$window","friendResolve","Authentication","Notification"]}();
!function(){"use strict";function FriendsAdminListController(FriendsService){var vm=this;vm.friends=FriendsService.query()}angular.module("friends.admin").controller("FriendsAdminListController",FriendsAdminListController),FriendsAdminListController.$inject=["FriendsService"]}();
!function(){"use strict";function MessagesAdminListController(MessagesService){var vm=this;vm.messages=MessagesService.query()}angular.module("messages.admin").controller("MessagesAdminListController",MessagesAdminListController),MessagesAdminListController.$inject=["MessagesService"]}();
!function(){"use strict";function MessagesAdminController($scope,$state,$window,message,Authentication){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.message.$remove(function(){$state.go("admin.messages.list")})}function save(isValid){function successCallback(res){$state.go("admin.messages.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.message.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.messageForm"),!1)}var vm=this;vm.message=message,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("messages.admin").controller("MessagesAdminController",MessagesAdminController),MessagesAdminController.$inject=["$scope","$state","$window","messageResolve","Authentication"]}();
!function(){"use strict";function TasksAdminListController(TasksService){var vm=this;vm.tasks=TasksService.query()}angular.module("tasks.admin").controller("TasksAdminListController",TasksAdminListController),TasksAdminListController.$inject=["TasksService"]}();
!function(){"use strict";function TasksAdminController($scope,$state,$window,task,Authentication){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.task.$remove(function(){$state.go("admin.tasks.list")})}function save(isValid){function successCallback(res){$state.go("admin.tasks.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.task.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.taskForm"),!1)}var vm=this;vm.task=task,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("tasks.admin").controller("TasksAdminController",TasksAdminController),TasksAdminController.$inject=["$scope","$state","$window","taskResolve","Authentication"]}();
!function(){"use strict";function UserListController($scope,$filter,AdminService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=15,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.users,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,AdminService.query(function(data){vm.users=data,vm.buildPager()})}angular.module("users.admin").controller("UserListController",UserListController),UserListController.$inject=["$scope","$filter","AdminService"]}();
!function(){"use strict";function UserController($scope,$state,$window,Authentication,user,Notification){function remove(user){$window.confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1),Notification.success("User deleted successfully!")):vm.user.$remove(function(){$state.go("admin.users"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> User deleted successfully!'})}))}function update(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=vm.user;user.$update(function(){$state.go("admin.user",{userId:user._id}),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> User saved successfully!'})},function(errorResponse){Notification.error({message:errorResponse.data.message,title:'<i class="glyphicon glyphicon-remove"></i> User update error!'})})}function isContextUserSelf(){return vm.user.username===vm.authentication.user.username}var vm=this;vm.authentication=Authentication,vm.user=user,vm.remove=remove,vm.update=update,vm.isContextUserSelf=isContextUserSelf}angular.module("users.admin").controller("UserController",UserController),UserController.$inject=["$scope","$state","$window","Authentication","userResolve","Notification"]}();
!function(){"use strict";function ChangePasswordController($scope,$http,Authentication,UsersService,PasswordValidator,Notification){function changeUserPassword(isValid){return isValid?void UsersService.changePassword(vm.passwordDetails).then(onChangePasswordSuccess).catch(onChangePasswordError):($scope.$broadcast("show-errors-check-validity","vm.passwordForm"),!1)}function onChangePasswordSuccess(response){Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Password Changed Successfully'}),vm.passwordDetails=null}function onChangePasswordError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Password change failed!'})}var vm=this;vm.user=Authentication.user,vm.changeUserPassword=changeUserPassword,vm.getPopoverMsg=PasswordValidator.getPopoverMsg}angular.module("users").controller("ChangePasswordController",ChangePasswordController),ChangePasswordController.$inject=["$scope","$http","Authentication","UsersService","PasswordValidator","Notification"]}();
!function(){"use strict";function ChangeProfilePictureController($timeout,Authentication,Upload,Notification){function onSuccessItem(response){Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Successfully changed profile picture'}),vm.user=Authentication.user=response,vm.fileSelected=!1,vm.progress=0}function onErrorItem(response){vm.fileSelected=!1,vm.progress=0,Notification.error({message:response.message,title:'<i class="glyphicon glyphicon-remove"></i> Failed to change profile picture'})}var vm=this;vm.user=Authentication.user,vm.progress=0,vm.upload=function(dataUrl){Upload.upload({url:"/api/users/picture",data:{newProfilePicture:dataUrl}}).then(function(response){$timeout(function(){onSuccessItem(response.data)})},function(response){response.status>0&&onErrorItem(response.data)},function(evt){vm.progress=parseInt(100*evt.loaded/evt.total,10)})}}angular.module("users").controller("ChangeProfilePictureController",ChangeProfilePictureController),ChangeProfilePictureController.$inject=["$timeout","Authentication","Upload","Notification"]}();
!function(){"use strict";function EditProfileController($scope,$http,$location,UsersService,Authentication,Notification){function updateUserProfile(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=new UsersService(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Edit profile successful!'}),Authentication.user=response},function(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Edit profile failed!'})})}var vm=this;vm.user=Authentication.user,vm.updateUserProfile=updateUserProfile}angular.module("users").controller("EditProfileController",EditProfileController),EditProfileController.$inject=["$scope","$http","$location","UsersService","Authentication","Notification"]}();
!function(){"use strict";function SocialAccountsController($state,$window,UsersService,Authentication,Notification){function hasConnectedAdditionalSocialAccounts(){return vm.user.additionalProvidersData&&Object.keys(vm.user.additionalProvidersData).length}function isConnectedSocialAccount(provider){return vm.user.provider===provider||vm.user.additionalProvidersData&&vm.user.additionalProvidersData[provider]}function removeUserSocialAccount(provider){UsersService.removeSocialAccount(provider).then(onRemoveSocialAccountSuccess).catch(onRemoveSocialAccountError)}function onRemoveSocialAccountSuccess(response){Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Removed successfully!'}),vm.user=Authentication.user=response}function onRemoveSocialAccountError(response){Notification.error({message:response.message,title:'<i class="glyphicon glyphicon-remove"></i> Remove failed!'})}function callOauthProvider(url){url+="?redirect_to="+encodeURIComponent($state.$current.url.prefix),$window.location.href=url}var vm=this;vm.user=Authentication.user,vm.hasConnectedAdditionalSocialAccounts=hasConnectedAdditionalSocialAccounts,vm.isConnectedSocialAccount=isConnectedSocialAccount,vm.removeUserSocialAccount=removeUserSocialAccount,vm.callOauthProvider=callOauthProvider}angular.module("users").controller("SocialAccountsController",SocialAccountsController),SocialAccountsController.$inject=["$state","$window","UsersService","Authentication","Notification"]}();
!function(){"use strict";function SettingsController($scope,Authentication){var vm=this;vm.user=Authentication.user}angular.module("users").controller("SettingsController",SettingsController),SettingsController.$inject=["$scope","Authentication"]}();