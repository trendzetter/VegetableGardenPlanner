"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.bootstrap.contextMenu","ui.utils","angularFileUpload","dragon-drop","ngCropper"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();
"use strict";angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return"guest"===role||Authentication.user&&void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])});
!function(app){"use strict";app.registerModule("articles"),app.registerModule("articles.services"),app.registerModule("articles.routes",["ui.router","articles.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("chat"),app.registerModule("chat.routes",["ui.router"])}(ApplicationConfiguration);
"use strict";ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]);
!function(app){"use strict";app.registerModule("crops"),app.registerModule("crops.services"),app.registerModule("crops.routes",["ui.router","crops.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("gardenparts"),app.registerModule("gardenparts.services"),app.registerModule("gardenparts.routes",["ui.router","gardenparts.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("gardens"),app.registerModule("gardens.services"),app.registerModule("gardens.routes",["ui.router","gardens.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("harvests"),app.registerModule("harvests.services"),app.registerModule("harvests.routes",["ui.router","harvests.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("plantfamilies"),app.registerModule("plantfamilies.services"),app.registerModule("plantfamilies.routes",["ui.router","plantfamilies.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("plant-varieties"),app.registerModule("plant-varieties.services"),app.registerModule("plant-varieties.routes",["ui.router","plant-varieties.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("rule-sets"),app.registerModule("rule-sets.services"),app.registerModule("rule-sets.routes",["ui.router","rule-sets.services"])}(ApplicationConfiguration);
"use strict";ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]);
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Articles",state:"articles",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","articles",{title:"List Articles",state:"articles.list"}),Menus.addSubMenuItem("topbar","articles",{title:"Create Article",state:"articles.create",roles:["user"]})}angular.module("articles").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"modules/articles/client/views/list-articles.client.view.html",controller:"ArticlesListController",controllerAs:"vm",data:{pageTitle:"Articles List"}}).state("articles.create",{url:"/create",templateUrl:"modules/articles/client/views/form-article.client.view.html",controller:"ArticlesController",controllerAs:"vm",resolve:{articleResolve:newArticle},data:{roles:["user","admin"],pageTitle:"Articles Create"}}).state("articles.edit",{url:"/:articleId/edit",templateUrl:"modules/articles/client/views/form-article.client.view.html",controller:"ArticlesController",controllerAs:"vm",resolve:{articleResolve:getArticle},data:{roles:["user","admin"],pageTitle:"Edit Article {{ articleResolve.title }}"}}).state("articles.view",{url:"/:articleId",templateUrl:"modules/articles/client/views/view-article.client.view.html",controller:"ArticlesController",controllerAs:"vm",resolve:{articleResolve:getArticle},data:{pageTitle:"Article {{ articleResolve.title }}"}})}function getArticle($stateParams,ArticlesService){return ArticlesService.get({articleId:$stateParams.articleId}).$promise}function newArticle(ArticlesService){return new ArticlesService}angular.module("articles.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getArticle.$inject=["$stateParams","ArticlesService"],newArticle.$inject=["ArticlesService"]}();
!function(){"use strict";function ArticlesController($scope,$state,article,Authentication){function remove(){confirm("Are you sure you want to delete?")&&vm.article.$remove($state.go("articles.list"))}function save(isValid){function successCallback(res){$state.go("articles.view",{articleId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.article._id?vm.article.$update(successCallback,errorCallback):vm.article.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.articleForm"),!1)}var vm=this;vm.article=article,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("articles").controller("ArticlesController",ArticlesController),ArticlesController.$inject=["$scope","$state","articleResolve","Authentication"]}();
!function(){"use strict";function ArticlesListController(ArticlesService){var vm=this;vm.articles=ArticlesService.query()}angular.module("articles").controller("ArticlesListController",ArticlesListController),ArticlesListController.$inject=["ArticlesService"]}();
!function(){"use strict";function ArticlesService($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}angular.module("articles.services").factory("ArticlesService",ArticlesService),ArticlesService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Chat",state:"chat"})}angular.module("chat").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/client/views/chat.client.view.html",controller:"ChatController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Chat"}})}angular.module("chat.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function ChatController($scope,$state,Authentication,Socket){function init(){Authentication.user||$state.go("home"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){vm.messages.unshift(message)}),$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}function sendMessage(){var message={text:vm.messageText};Socket.emit("chatMessage",message),vm.messageText=""}var vm=this;vm.messages=[],vm.messageText="",vm.sendMessage=sendMessage,init()}angular.module("chat").controller("ChatController",ChatController),ChatController.$inject=["$scope","$state","Authentication","Socket"]}();
"use strict";angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]);
"use strict";angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]);
!function(){"use strict";function MenuConfig(Menus){Menus.addMenu("account",{roles:["user"]}),Menus.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile",state:"settings.profile"}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile Picture",state:"settings.picture"}),Menus.addSubMenuItem("account","settings",{title:"Change Password",state:"settings.password"}),Menus.addSubMenuItem("account","settings",{title:"Manage Social Accounts",state:"settings.accounts"})}angular.module("core").run(MenuConfig),MenuConfig.$inject=["Menus"]}();
"use strict";angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0,pageTitle:"Not-Found"}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0,pageTitle:"Bad-Request"}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0,pageTitle:"Forbidden"}})}]);
"use strict";angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.accountMenu=Menus.getMenu("account").items[0],$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]);
"use strict";angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]);
!function(){"use strict";function pageTitle($rootScope,$timeout,$interpolate,$state){function link(scope,element){function listener(event,toState){var title=getTitle($state.$current);$timeout(function(){element.text(title)},0,!1)}function getTitle(currentState){var applicationCoreTitle="MEAN.js",workingState=currentState;if(currentState.data&&currentState.data.pageTitle){workingState="undefined"!=typeof workingState.locals?workingState.locals.globals:workingState;var stateTitle=$interpolate(currentState.data.pageTitle)(workingState);return applicationCoreTitle+" - "+stateTitle}return applicationCoreTitle}$rootScope.$on("$stateChangeSuccess",listener)}var directive={retrict:"A",link:link};return directive}angular.module("core").directive("pageTitle",pageTitle),pageTitle.$inject=["$rootScope","$timeout","$interpolate","$state"]}();
"use strict";angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]);
"use strict";angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]);
"use strict";angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]);
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Crops",state:"crops",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","crops",{title:"List crops",state:"crops.list"}),Menus.addSubMenuItem("topbar","crops",{title:"Create crop",state:"crops.create",roles:["user"]})}angular.module("crops").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("crops",{"abstract":!0,url:"/crops",template:"<ui-view/>"}).state("crops.list",{url:"",templateUrl:"modules/crops/client/views/list-crops.client.view.html",controller:"CropsListController",controllerAs:"vm",data:{pageTitle:"Crops list"}}).state("crops.create",{url:"/create",templateUrl:"modules/crops/client/views/form-crop.client.view.html",controller:"CropsController",controllerAs:"vm",resolve:{cropResolve:newCrop},data:{roles:["user","admin"],pageTitle:"Add crop"}}).state("crops.edit",{url:"/:cropId/edit",templateUrl:"modules/crops/client/views/form-crop.client.view.html",controller:"CropsController",controllerAs:"vm",resolve:{cropResolve:getCrop},data:{roles:["user","admin"],pageTitle:"Edit crop {{ cropResolve.name }}"}}).state("crops.view",{url:"/:cropId",templateUrl:"modules/crops/client/views/view-crop.client.view.html",controller:"CropsController",controllerAs:"vm",resolve:{cropResolve:getCrop},data:{pageTitle:"Crop {{ articleResolve.name }}"}})}function getCrop($stateParams,CropsService){return CropsService.get({cropId:$stateParams.cropId}).$promise}function newCrop(CropsService){return new CropsService}angular.module("crops.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getCrop.$inject=["$stateParams","CropsService"],newCrop.$inject=["CropsService"]}();
!function(){"use strict";function CropsController($scope,$state,crop,Authentication,PlantFamilyService){function remove(){confirm("Are you sure you want to delete?")&&vm.crop.$remove($state.go("crops.list"))}function save(isValid){function successCallback(res){$state.go("crops.view",{cropId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.crop._id?vm.crop.$update(successCallback,errorCallback):vm.crop.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.cropForm"),!1)}var vm=this;vm.crop=crop,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.plantfamilies=PlantFamilyService.query()}angular.module("crops").controller("CropsController",CropsController),CropsController.$inject=["$scope","$state","cropResolve","Authentication","PlantFamilyService"]}();
!function(){"use strict";function CropsListController(CropsService){var vm=this;vm.crops=CropsService.query()}angular.module("crops").controller("CropsListController",CropsListController),CropsListController.$inject=["CropsService"]}();
!function(){"use strict";function CropsService($resource){return $resource("api/crops/:cropId",{cropId:"@_id"},{update:{method:"PUT"}})}angular.module("crops.services").factory("CropsService",CropsService),CropsService.$inject=["$resource"]}();
!function(){"use strict";angular.module("gardenparts")}();
"use strict";angular.module("gardenparts").config(["$stateProvider",function($stateProvider){$stateProvider.state("editGardenpart",{url:"/gardenparts/:bk/:selectedDate/:plant",templateUrl:"modules/gardenparts/client/views/edit-gardenpart.client.view.html"})}]);
"use strict";angular.module("gardenparts").controller("GardenpartsController",["$scope","$state","$stateParams","$location","Authentication","GardensService","GardenpartService","Plantvarieties","Plantings","PastPlantings","RuleSetsService",function($scope,$state,$stateParams,$location,Authentication,Gardens,Gardenpart,Plantvarieties,Plantings,PastPlantings,RuleSets){function cropgroupByCrop(crop){var cropgroup=!1;loop:for(var c=0;c<$scope.ruleSet.cropgroups.length;c++)for(var crops=$scope.ruleSet.cropgroups[c].crops,d=0;d<crops.length;d++)if(crops[d]._id===crop){cropgroup=$scope.ruleSet.cropgroups[c]._id;break loop}return cropgroup}$scope.authentication=Authentication,$scope.date=$stateParams.selectedDate,$scope.plantings=[],$scope.newplantings=[],$scope.cancelPlantings=[],$scope.harvests=[],$scope.changes=[],$scope.crops=[],$scope.cropClicked=function(crop){console.log("crop: "+JSON.stringify(crop)),$scope.rotationAdvice(crop)},$scope.rotationAdvice=function(crop){console.log("calculating the advice! crop:"+crop);var cropgroup=cropgroupByCrop(crop);console.log("calculating the advice! cropgroup:"+cropgroup);for(var i=0;i<$scope.pastplantings.length;i++){var planting=$scope.pastplantings[i];planting.greenlevel=null,planting.redlevel=null;var yearsApart=new Date(new Date($scope.date)-new Date(planting.validTo)).getFullYear()-1970;if(console.log("years apart: "+yearsApart+" date:"+planting.validTo),planting.opacity=1-yearsApart*yearsApart/36,2>yearsApart&&cropgroup===planting.cropgroup)planting.greenlevel=0,planting.redlevel=255;else for(var k=0;k<$scope.ruleSet.rotationrules.length;k++)console.log("cropgroup"+cropgroup+"rotationrules[k].cropgroup"+$scope.ruleSet.rotationrules[k].cropgroup),console.log("previousCropgroup:"+$scope.ruleSet.rotationrules[k].previousCropgroup+" planting.cropgroup: "+planting.cropgroup),cropgroup===$scope.ruleSet.rotationrules[k].cropgroup&&$scope.ruleSet.rotationrules[k].previousCropgroup===planting.cropgroup&&(console.log("rule applies, checking time"),$scope.ruleSet.rotationrules[k].yearsBetween>yearsApart?(planting.greenlevel=0,planting.redlevel=255):(planting.greenlevel=255,planting.redlevel=0))}},$scope.updatePlantings=function(){for(var gardenpart=$scope.gardenpart,plantings=$scope.plantings,i=0;i<plantings.length;i++)plantings[i].elemtop=parseInt(plantings[i].elemtop)+parseInt(gardenpart.elemtop),plantings[i].elemleft=parseInt(plantings[i].elemleft)+parseInt(gardenpart.elemleft),plantings[i].plantVariety=plantings[i].plantVariety._id;Plantings.createPlantings({bk:gardenpart.garden,selectedDate:$stateParams.selectedDate},$scope.newplantings,function(){Plantings.cancelPlantings({bk:gardenpart.garden,selectedDate:$stateParams.selectedDate},$scope.cancelPlantings,function(){for(i=0;i<$scope.harvests.length;i++)$scope.harvests[i].$save();$state.go("viewGarden",{bk:gardenpart.garden,selectedDate:$stateParams.selectedDate})})}),$location.path("gardens/"+gardenpart.garden+"/"+$stateParams.selectedDate)},$scope.$on("addPlantvariety",function(event,plantvariety){var newplanting={garden:$scope.gardenpart.garden,validFrom:$stateParams.selectedDate,plantVariety:plantvariety,elemwidth:2*plantvariety.cmInRow,elemheight:2*plantvariety.cmBetweenRow,elemtop:0,elemleft:0,orientation:"horizontal",cmBetweenRow:plantvariety.cmBetweenRow,cmInRow:plantvariety.cmInRow};$scope.newplantings.push(newplanting),$scope.plantings.push(newplanting),console.log("plantvariety clicked! "+plantvariety.name)}),$scope.cancelNewPlanting=function(planting){var index=$scope.newplantings.indexOf(planting);$scope.newplantings.splice(index,1)},$scope.cancelPlanting=function(planting){$scope.cancelPlantings.push(planting[0]._id)},$scope.getPlantvarieties=function(){console.log("$stateParams.selectedDate"+$stateParams.selectedDate);var datearray=$stateParams.selectedDate.split("-");console.log("datearray: "+datearray);var now=new Date;now.setYear(datearray[0]),console.log("year: "+datearray[0]);var month=datearray[1]-1;now.setMonth(month),console.log("month: "+month),now.setDate(datearray[2]),console.log("dag: "+datearray[2]);var start=new Date(now.getFullYear(),0,0);console.log("start: "+start),console.log("now: "+now);var diff=now-start,oneDay=864e5,day=Math.floor(diff/oneDay);console.log("doy: "+day),$scope.plantvarieties=Plantvarieties.get({doy:day}),$scope.plantvarieties.$promise.then(function(plantvarieties){if(void 0!==$scope.gardenpart.plant){plantvarieties.unshift($scope.gardenpart.plant);for(var index=1;index<plantvarieties.length&&plantvarieties[index]._id!==$scope.gardenpart.plant._id;)index++;plantvarieties.splice(index,1)}for(var i=0;i<plantvarieties.length;i++){for(var plant=plantvarieties[i],newCrop=!0,j=0;newCrop===!0&&j<$scope.crops.length;){var crop=$scope.crops[j];crop._id===plant.crop._id&&(plant.crop=plant.crop._id,newCrop=!1,crop.plantvarieties.push(plant)),j++}if(newCrop){var addcrop=plant.crop;plant.crop=plant.crop._id,addcrop.plantvarieties=[],addcrop.plantvarieties.push(plant),$scope.crops.push(addcrop)}}})},$scope.findOne=function(){console.log("stateparams.plant: "+$stateParams.plant),$scope.gardenpart=Gardenpart.get({bk:$stateParams.bk,selectedDate:$stateParams.selectedDate,plant:$stateParams.plant}),$scope.gardenpart.$promise.then(function(gardenpart){$scope.getPlantvarieties(),$scope.garden=Gardens.get({bk:gardenpart.garden,selectedDate:$stateParams.selectedDate},function(garden){for(var plantings=gardenpart.plantings,gardenparttop=parseInt(gardenpart.elemtop),gardenpartleft=parseInt(gardenpart.elemleft),i=0;i<plantings.length;i++)plantings[i].elemtop=parseInt(plantings[i].elemtop)-gardenparttop,plantings[i].elemleft=parseInt(plantings[i].elemleft)-gardenpartleft;$scope.plantings=gardenpart.plantings,$scope.ruleSet=RuleSets.get({ruleSetId:garden.ruleset}),$scope.ruleSet.$promise.then(function(ruleSet){$scope.pastplantings=PastPlantings.get({bk:$stateParams.bk,selectedDate:$stateParams.selectedDate}),$scope.pastplantings.$promise.then(function(pastp){for(var pp=$scope.pastplantings,j=0;j<pp.length;j++){var planting=pp[j];planting.elemtop=parseInt(planting.elemtop)-gardenparttop,planting.elemleft=parseInt(planting.elemleft)-gardenpartleft,planting.cropgroup=cropgroupByCrop(planting.plantVariety.crop)}$scope.rotationAdvice($scope.crops[0]._id),$scope.$emit("plantingsLoaded")})})})})}}]);
"use strict";angular.module("gardenparts").controller("PlantingController",["$scope","$uibModal",function($scope,$uibModal){"vertical"===$scope.planting.orientation?($scope.horizontal=Math.round($scope.planting.cmBetweenRow),$scope.vertical=Math.round($scope.planting.cmInRow)):($scope.horizontal=Math.round($scope.planting.cmInRow),$scope.vertical=Math.round($scope.planting.cmBetweenRow)),$scope.menuOptions=[],"undefined"==typeof $scope.planting._id?($scope.menuOptions.push(["Rotate",function(){$scope.rotate()}]),$scope.menuOptions.push(null),$scope.menuOptions.push(["Cancel",function(){var planting=$scope.plantings.splice($scope.$index,1);$scope.cancelNewPlanting(planting)}])):($scope.menuOptions.push(["Harvest",function(){var size="lg",modalInstance=$uibModal.open({templateUrl:"modules/harvests/client/views/create-harvest.client.view.html",controller:"HarvestsController",size:size,resolve:{planting:function(){return $scope.planting}}});modalInstance.result.then(function(harvest){console.log("planting harvest result: "+JSON.stringify(harvest)),$scope.harvests.push(harvest),$scope.plantings.splice($scope.$index,1)},function(){console.log("Modal dismissed at: "+new Date)})}]),$scope.menuOptions.push(["Cancel",function(){var planting=$scope.plantings.splice($scope.$index,1);$scope.cancelPlanting(planting)}])),$scope.updatePlantingCoordinates=function(top,left,width,height){var planting=$scope.planting;planting.elemtop=top,planting.elemleft=left,planting.elemwidth=width,planting.elemheight=height},$scope.updatePlantingCoordinatesStop=function(top,left,width,height){var change={};change.type="updateCoordinates";var planting=$scope.planting;change.planting=planting,change.data={top:planting.elemtop,left:planting.elemleft,width:planting.elemwidth,height:planting.elemheight},$scope.updatePlantingCoordinates(top,left,width,height)}}]);
"use strict";angular.module("gardenparts").controller("PlantingpopoverController",["$scope",function($scope){}]);
"use strict";angular.module("gardenparts").directive("plantvarietyimage",["$rootScope",function($rootScope){return{restrict:"A",link:function(scope,element,attrs){scope.plantVarietyClicked=function(){$rootScope.$broadcast("addPlantvariety",scope.plantvariety)}}}}]);
"use strict";var getCoordinates=function(elem){var el=$(elem),co={};return co.top=el.css("top").replace("px",""),co.left=el.css("left").replace("px",""),co.height=el.css("height").replace("px",""),co.width=el.css("width").replace("px",""),co};angular.module("gardenparts").directive("planting",["$timeout",function($timeout){return{restrict:"A",link:function(scope,element,attrs){var updateCoordinates=function(){var co=getCoordinates(element,scope.zoom);scope.updatePlantingCoordinates(co.top/scope.zoom,co.left/scope.zoom,co.width/scope.zoom,co.height/scope.zoom),scope.$apply()},updateCoordinatesStop=function(){var co=getCoordinates(element,scope.zoom);scope.updatePlantingCoordinatesStop(co.top/scope.zoom,co.left/scope.zoom,co.width/scope.zoom,co.height/scope.zoom),scope.$apply()},makeDraggable=function(){var draggableConfig={stop:updateCoordinatesStop,drag:updateCoordinates,animate:!0,grid:[1*scope.zoom,1*scope.zoom],containment:"parent",revert:"valid",snap:".planting ",snapmode:"outer",snapTolerance:5*scope.zoom};element.draggable(draggableConfig)},makeResizable=function(){var resizableConfig={stop:updateCoordinatesStop,resize:updateCoordinates,grid:[scope.planting.cmInRow*scope.zoom,scope.planting.cmBetweenRow*scope.zoom],handles:"all",containment:"parent",autoHide:!0,snap:!1};element.resizable(resizableConfig)};scope.popoverEvent=function(){$timeout(function(){element.trigger("customEvent")},0)},element.on("click",function(){element.effect("highlight")}),element.addClass("planting"),scope.$on("updatedZoom",function(){"undefined"==typeof scope.planting._id&&$timeout(function(){makeDraggable(),makeResizable()})}),"undefined"==typeof scope.planting._id?(element.effect("pulsate",function(){scope.opacity=1,element.addClass("newPlanting")}),makeResizable(),makeDraggable()):scope.opacity=.5,element.droppable(),scope.rotate=function(){var numberPlantsVertical,numberPlantsHorizontal;"vertical"===scope.planting.orientation?(scope.planting.orientation="horizontal",scope.horizontal=Math.round(scope.planting.cmInRow),scope.vertical=Math.round(scope.planting.cmBetweenRow),element.resizable("option","grid",[scope.planting.cmInRow*scope.zoom,scope.planting.cmBetweenRow*scope.zoom]),numberPlantsVertical=Math.floor(scope.planting.elemheight/scope.planting.cmBetweenRow),0===numberPlantsVertical&&(numberPlantsVertical=1),numberPlantsHorizontal=Math.floor(scope.planting.elemwidth/scope.planting.cmBetweenRow),0===numberPlantsHorizontal&&(numberPlantsHorizontal=1),console.log("horizontal numberPlantsHorizontal: "+numberPlantsHorizontal+" scope.planting.elemwidth: "+scope.planting.elemwidth+" scope.planting.cmInRow: "+scope.planting.cmInRow),console.log(" Number of plants vertical: "+numberPlantsVertical),scope.planting.elemhwidth=numberPlantsHorizontal*scope.planting.cmInRow,scope.planting.elemhheight=numberPlantsVertical*scope.planting.cmBetweenRow):(scope.horizontal=Math.round(scope.planting.cmBetweenRow),scope.vertical=Math.round(scope.planting.cmInRow),scope.planting.orientation="vertical",element.resizable("option","grid",[scope.planting.cmBetweenRow*scope.zoom,scope.planting.cmInRow*scope.zoom]),numberPlantsVertical=Math.floor(scope.planting.elemheight/scope.planting.cmInRow),0===numberPlantsVertical&&(numberPlantsVertical=1),numberPlantsHorizontal=Math.floor(scope.planting.elemwidth/scope.planting.cmBetweenRow),0===numberPlantsHorizontal&&(numberPlantsHorizontal=1),console.log("vertical numberPlantsHorizontal: "+numberPlantsHorizontal+" plantingwidth: "+scope.planting.elemwidth),console.log(" Number of plants vertical: "+numberPlantsVertical),scope.planting.elemheight=numberPlantsVertical*scope.planting.cmInRow,scope.planting.elemwidth=numberPlantsHorizontal*scope.planting.cmBetweenRow,console.log(" plantingwidth: "+element.css("width")))}}}}]);
"use strict";angular.module("gardenparts").directive("zoomable",["$rootScope",function($rootScope){return{restrict:"A",link:function(scope,element,attrs){scope.vm||(scope.vm={}),scope.vm.zoom=1;var broadcastZoom=function(){scope.zoom=scope.vm.zoom,console.log("zoomIn!"+scope.vm.zoom),$rootScope.$broadcast("updatedZoom",scope.vm.zoom)};scope.$on("plantingsLoaded",function(){console.log("plantingsLoaded in plantingpart"),scope.vm.zoom=2,broadcastZoom()}),scope.zoomIn=function(){scope.vm.zoom+=.2,broadcastZoom()},scope.zoomOut=function(){scope.vm.zoom-=.2,broadcastZoom()}}}}]);
!function(){"use strict";function GardenpartService($resource,$stateParams){return $resource("api/gardenpart/:bk/:selectedDate/:plant",{bk:"@bk",selectedDate:$stateParams.selectedDate},{update:{method:"PUT"}})}angular.module("gardenparts.services").factory("GardenpartService",GardenpartService),GardenpartService.$inject=["$resource","$stateParams"]}();
"use strict";angular.module("gardenparts.services").factory("PastPlantings",["$resource","$stateParams",function($resource,$stateParams){return $resource("api/past-plantings/:bk/:selectedDate",{bk:"@bk",selectedDate:$stateParams.selectedDate},{get:{isArray:!0}})}]);
"use strict";angular.module("gardenparts").factory("Plantings",["$resource",function($resource){return $resource("api/plantings/:bk/:selectedDate",{selectedDate:"@selectedDate",bk:"@bk"},{createPlantings:{method:"PUT",isArray:!0},cancelPlantings:{method:"POST",isArray:!0}})}]);
"use strict";angular.module("gardenparts").factory("Plantvarieties",["$resource",function($resource){return $resource("api/plant-varieties/group-by-crop/:doy",{doy:"@doy"},{get:{isArray:!0}})}]);
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Gardens",state:"gardens",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","gardens",{title:"List Gardens",state:"listGardens"}),Menus.addSubMenuItem("topbar","gardens",{title:"Create Garden",state:"createGarden",roles:["user"]})}angular.module("gardens").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("listGardens",{url:"/gardens/list/:plant/:selectedDate",templateUrl:"modules/gardens/client/views/list-gardens.client.view.html",controller:"GardensListController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Gardens list"}}).state("createGarden",{url:"/gardens/create",templateUrl:"modules/gardens/client/views/form-garden.client.view.html",controller:"GardensNgController",controllerAs:"vm",resolve:{gardenResolve:newGarden},data:{roles:["user","admin"],pageTitle:"Create garden"}}).state("viewGarden",{url:"/gardens/:bk/:selectedDate",templateUrl:"modules/gardens/client/views/view-garden.client.view.html",controller:"GardensNgController",controllerAs:"vm",resolve:{gardenResolve:getGarden},data:{roles:["user","admin"],pageTitle:"View garden"}}).state("plantGarden",{url:"/gardens/plant/:bk/:selectedDate/:plant",templateUrl:"modules/gardens/client/views/view-garden.client.view.html",controller:"PlantGardenController",controllerAs:"vm",resolve:{gardenResolve:getGarden},data:{roles:["user","admin"],pageTitle:"Plant garden"}}).state("editGarden",{url:"/gardens/:bk/edit/:selectedDate",templateUrl:"modules/gardens/client/views/form-garden.client.view.html",controller:"GardensNgController",controllerAs:"vm",resolve:{gardenResolve:getGarden},data:{roles:["user","admin"],pageTitle:"Edit garden"}}).state("designGarden",{url:"/gardens/:gardenId/layout/:selectedDate",templateUrl:"modules/gardens/client/views/layout-garden.client.view.html"})}function getGarden($stateParams,GardensService){var garden=GardensService.get({bk:$stateParams.bk,selectedDate:$stateParams.selectedDate,plant:$stateParams.plant});return garden.$promise.then(function(garden){for(var gardentop=parseInt(garden.elemtop),gardenleft=parseInt(garden.elemleft),gardenparts=garden.gardenparts,plantings=garden.plantings,pastplantings=garden.pastplantings,i=0;i<gardenparts.length;i++){var part=gardenparts[i],partbottomTop=parseInt(part.elemtop)+parseInt(part.elemheight),partrightLeft=parseInt(part.elemleft)+parseInt(part.elemwidth);part.plantings=[];for(var toRemove=[],j=0;j<plantings.length;j++){var planting=plantings[j];partbottomTop>planting.elemtop&&planting.elemtop>=part.elemtop&&partrightLeft>planting.elemleft&&planting.elemleft>=part.elemleft&&(planting.elemtop=parseInt(planting.elemtop)-parseInt(part.elemtop),planting.elemleft=parseInt(planting.elemleft)-parseInt(part.elemleft),part.plantings.push(planting),toRemove.push(j))}for(;toRemove.length>0;)plantings.splice(toRemove.pop(),1);if(pastplantings){part.pastplantings=[];for(var k=0;k<pastplantings.length;k++){var pastplanting=pastplantings[k];partbottomTop>pastplanting.elemtop&&pastplanting.elemtop>=part.elemtop&&partrightLeft>pastplanting.elemleft&&pastplanting.elemleft>=part.elemleft&&(pastplanting.elemtop=parseInt(pastplanting.elemtop)-parseInt(part.elemtop),pastplanting.elemleft=parseInt(pastplanting.elemleft)-parseInt(part.elemleft),part.pastplantings.push(pastplanting))}}part.elemtop=parseInt(part.elemtop)-gardentop,part.elemleft=parseInt(part.elemleft)-gardenleft}return garden}),garden.$promise}function newGarden(GardensService){return new GardensService}angular.module("gardens.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getGarden.$inject=["$stateParams","GardensService"],newGarden.$inject=["GardensService"]}();
"use strict";angular.module("gardens").controller("EditformController",["$scope","$rootScope","Gardendata","Users","$stateParams",function($scope,$rootScope,Gardendata,Users,$stateParams){$scope.selectedDate=$stateParams.selectedDate,$scope.updateGarden=function(){$rootScope.$broadcast("updateGarden")},$scope.garden=Gardendata.getGarden(),$scope.garden.$promise.then(function(){$scope.bk=$scope.garden.bk}),$scope.addKeeper=function(){$scope.error="",$scope.newkeeper===$scope.garden.user.username?$scope.error="You don't need to add yourself":Users.get({name:$scope.newkeeper}).$promise.then(function(user){$scope.garden.keepers.push(user),$scope.newkeeper=""},function(errorResponse){$scope.error=errorResponse.data.message})}}]);
"use strict";angular.module("gardens").controller("FormController",["$scope","Gardendata","Authentication","$rootScope",function($scope,Gardendata,Authentication,$rootScope){if($scope.create=function(){$rootScope.$broadcast("createGarden")},$scope.updateGarden=function(){Gardendata.setGarden($scope.vm.garden)},$scope.$on("error",function(){$scope.error=Gardendata.getError()}),$scope.authentication=Authentication,$scope.vm.garden=Gardendata.getGarden(),$scope.setDate=function(date){$scope.vm.garden.selectedDate=date},$scope.vm.garden&&"undefined"===$scope.vm.garden.selectedDate){var today=new Date;$scope.vm.garden.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2),console.log("selected date! "+$scope.garden.selectedDate)}}]);
"use strict";angular.module("gardens").controller("GardenpartController",["$scope","$stateParams","$location","Authentication","GardenpartService",function($scope,$stateParams,$location,Authentication,Gardenpart){$scope.menuOptions=[],"undefined"==typeof $scope.gardenpart._id&&($scope.menuOptions.push(["Rotate",function(){$scope.rotate()}]),$scope.menuOptions.push(null)),$scope.menuOptions.push(["Remove",function(){var part=$scope.gardenparts.splice($scope.$index,1);$scope.deletePart(part[0])}]),$scope.update=function(top,left,width,height){$scope.tooltiptext="<br />breedte: "+height+" cm<br />lengte: "+width+" cm<br />oppervlakte: "+height*width/1e4+" m²";var gardenpart=$scope.gardenpart;gardenpart.elemtop=top,gardenpart.elemleft=left,gardenpart.elemwidth=width,gardenpart.elemheight=height}}]);
"use strict";angular.module("gardens").controller("GardensController",["$scope","$stateParams","$state","$location","Authentication","GardensService","GardenpartService","Gardendata","$rootScope",function($scope,$stateParams,$state,$location,Authentication,Gardens,Gardenpart,Gardendata,$rootScope){if($scope.authentication=Authentication,$scope.gardenparts=[],$scope.tooltiptext="testtooltip",$scope.zoom=1,"undefined"==typeof $stateParams.selectedDate){var today=new Date;$scope.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2),$stateParams.selectedDate=$scope.selectedDate,console.log("selected date! "+$scope.selectedDate)}else $scope.selectedDate=$stateParams.selectedDate;$scope.back=function(){console.log("back!"+JSON.stringify($state.previous)),$state.go($state.previous.state.name,$state.previous.params)},$scope.newGarden=function(){$scope.garden={},Gardendata.setGarden($scope.garden)},$scope.updateCoordinates=function(top,left,height,width){$scope.garden.elemtop=top,$scope.garden.elemleft=left,$scope.garden.elemwidth=width,$scope.garden.elemheight=height;var opp=Math.round(height*width/1e4);$scope.tooltiptext="breedte: "+height+" cm lengte: "+width+" cm oppervlakte: "+opp+" m² ± "+Math.round(height*width/15e4)+" personen"},$scope.$on("createGarden",function(){var garden=($scope.authentication.user,new Gardens({name:$scope.garden.name,elemwidth:$scope.garden.elemwidth,elemheight:$scope.garden.elemheight,elemtop:$scope.garden.elemtop,elemleft:$scope.garden.elemleft,validFrom:new Date(0)}));garden.$save(function(response){$location.path("gardens/"+response._id+"/layout/"+$scope.garden.selectedDate)},function(errorResponse){Gardendata.setError(errorResponse.data.message),$rootScope.$broadcast("error")})}),$scope.remove=function(garden){if(garden){garden.$remove();for(var i in $scope.gardens)$scope.gardens[i]===garden&&$scope.gardens.splice(i,1)}else $scope.garden.$remove(function(){$location.path("gardens")})},$scope.findOne=function(){var bk;bk="undefined"==typeof $stateParams.bk?$scope.garden.bk:$stateParams.bk,$scope.garden=Gardens.get({bk:bk,selectedDate:$stateParams.selectedDate,plant:$stateParams.plant}),Gardendata.setGarden($scope.garden),$scope.garden.$promise.then(function(garden){for(var gardenparts=garden.gardenparts,plantings=garden.plantings,gardentop=parseInt(garden.elemtop),gardenleft=parseInt(garden.elemleft),i=0;i<gardenparts.length;i++){var part=gardenparts[i],partbottomTop=parseInt(part.elemtop)+parseInt(part.elemheight),partrightLeft=parseInt(part.elemleft)+parseInt(part.elemwidth);part.plantings=[],part.pastplantings=[];for(var toRemove=[],j=0;j<plantings.length;j++){var planting=plantings[j];console.log("next: "),console.log("partbottomTop: "+partbottomTop+" > planting.elemtop "+planting.elemtop+" > part.elemtop "+part.elemtop),console.log("partrightLeft: "+partrightLeft+" > planting.elemleft "+planting.elemleft+" > part.elemleft > "+part.elemleft),partbottomTop>planting.elemtop&&planting.elemtop>=part.elemtop&&partrightLeft>planting.elemleft&&planting.elemleft>=part.elemleft&&(planting.elemtop=parseInt(planting.elemtop)-parseInt(part.elemtop),planting.elemleft=parseInt(planting.elemleft)-parseInt(part.elemleft),part.plantings.push(planting),console.log("planting pushed!"),toRemove.push(j))}for(;toRemove.length>0;)plantings.splice(toRemove.pop(),1);part.elemtop=parseInt(part.elemtop)-gardentop,part.elemleft=parseInt(part.elemleft)-gardenleft}$scope.gardenparts=garden.gardenparts,$scope.$emit("gardenpartsLoaded")})}}]);
"use strict";angular.module("gardens").controller("GardenversionsController",["$scope","$state","$stateParams","$location","Authentication","GardensService","Gardenversions","GardenpartsService","Gardendata",function($scope,$state,$stateParams,$location,Authentication,Gardens,Gardenversions,Gardenpart,Gardendata){$scope.authentication=Authentication,$scope.gardenparts=[];var newparts=[],delparts=[];if("undefined"==typeof $stateParams.selectedDate){var today=new Date;$scope.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2),$stateParams.selectedDate=$scope.selectedDate}else $scope.selectedDate=$stateParams.selectedDate;$scope.updateCoordinates=function(top,left,height,width){var cancel=!1;top!==$scope.garden.elemtop&&(angular.forEach($scope.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemtop-(top-$scope.garden.elemtop);0>newposition&&(cancel=!0)}),cancel?height=$scope.garden.elemheight:(angular.forEach($scope.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemtop-(top-$scope.garden.elemtop);gardenpart.elemtop=newposition}),$scope.garden.elemtop=top,$scope.minHeight=$scope.initialMinHeight+($scope.initialTop-top))),left===$scope.garden.elemleft||cancel||(angular.forEach($scope.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemleft-(left-$scope.garden.elemleft);0>newposition&&(cancel=!0)}),cancel?width=$scope.garden.elemwidth:(angular.forEach($scope.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemleft-(left-$scope.garden.elemleft);gardenpart.elemleft=newposition}),$scope.garden.elemleft=left,$scope.minWidth=$scope.initialMinWidth+($scope.initialLeft-left))),$scope.garden.elemwidth=width,$scope.garden.elemheight=height;var opp=height*width/1e4;return $scope.tooltiptext="breedte: "+height+" cm<br />lengte: "+width+" cm<br />oppervlakte: "+opp+" m²<br /> ± "+Math.round(opp/15)+" personen",cancel},$scope.deletePart=function(part){if("undefined"==typeof part._id){var index=newparts.indexOf(part);newparts.splice(index,1)}else console.log("delete part: "+JSON.stringify(part)),part.validTo=$stateParams.selectedDate,delparts.push(part)},$scope.$on("addNewGardenpart",function(event,tool){var newpart={garden:$scope.garden.bk,validFrom:$stateParams.selectedDate,type:tool.name};newparts.push(newpart),$scope.gardenparts.push(newpart)}),$scope.$on("updateGarden",function(){$scope.updateParts();var garden=$scope.garden;garden.validFrom=$scope.selectedDate;for(var leankeepers=[],keepers=garden.keepers,i=0;i<keepers.length;i++)console.log("garden.keepers[i]"+keepers[i]._id),leankeepers.push(keepers[i]._id);garden.keepers=leankeepers,console.log("garden.keepers"+garden.keepers),$state.$current.data&&"gardens.create"===$state.$current.data.name&&($stateParams.selectedDate=$scope.selectedDate),garden.selectedDate=$stateParams.selectedDate,garden.$update({selectedDate:$scope.selectedDate},function(garden){console.log("success, got data: ",garden),$state.go("viewGarden",{bk:garden.bk,selectedDate:$scope.selectedDate})},function(errorResponse){$scope.error=errorResponse.data.message})}),$scope.updateParts=function(){var garden=$scope.garden;newparts._id=garden._id;for(var gardenparts=$scope.gardenparts,i=0;i<gardenparts.length;i++)gardenparts[i].elemtop=parseInt(gardenparts[i].elemtop)+parseInt(garden.elemtop),gardenparts[i].elemleft=parseInt(gardenparts[i].elemleft)+parseInt(garden.elemleft);Gardenpart.createParts({bk:garden.bk,selectedDate:$stateParams.selectedDate},newparts,function(){Gardenpart.deleteParts({bk:garden.bk,selectedDate:$stateParams.selectedDate},delparts,function(){var filtered=gardenparts.filter(function(x){return newparts.indexOf(x)<0}),modified=[];for(i=0;i<filtered.length;i++)filtered[i].modified&&(delete filtered[i].modified,modified.push(filtered[i]));Gardenpart.updateParts({bk:garden.bk,selectedDate:$stateParams.selectedDate},modified,function(){$state.go("viewGarden",{bk:garden.bk,selectedDate:$scope.selectedDate})})})})},$scope.findOneVersion=function(){$scope.garden=Gardenversions.get({gardenId:$stateParams.gardenId,selectedDate:$stateParams.selectedDate}),Gardendata.setGarden($scope.garden),$scope.garden.$promise.then(function(garden){for(var gardenparts=garden.gardenparts,gardentop=parseInt(garden.elemtop),gardenleft=parseInt(garden.elemleft),i=0;i<gardenparts.length;i++)gardenparts[i].elemtop=parseInt(gardenparts[i].elemtop)-gardentop,gardenparts[i].elemleft=parseInt(gardenparts[i].elemleft)-gardenleft;$scope.gardenparts=gardenparts,$scope.$emit("gardenpartsLoaded")})},$scope.findVersions=function(){$scope.gardens=Gardenversions.query({selectedDate:null})}}]);
!function(){"use strict";function GardensListController(GardensService,$stateParams){var vm=this;if($stateParams.plant)vm.selectedDate=$stateParams.selectedDate,vm.plant=$stateParams.plant,vm.gardens=GardensService.getPlantGardens({selectedDate:$stateParams.selectedDate,plant:$stateParams.plant});else{var today=new Date;vm.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2),vm.gardens=GardensService.query()}}angular.module("gardens").controller("GardensListController",GardensListController),GardensListController.$inject=["GardensService","$stateParams"]}();
!function(){"use strict";function GardensNgController($scope,$state,garden,Authentication,$stateParams,GardenpartsService,Users,RuleSetsService){function remove(){confirm("Are you sure you want to delete?")&&vm.garden.$remove($state.go("gardens.list"))}function updateParts(){for(var garden=vm.garden,gardenparts=vm.garden.gardenparts,i=0;i<gardenparts.length;i++)gardenparts[i].elemtop=parseInt(gardenparts[i].elemtop)+parseInt(garden.elemtop),gardenparts[i].elemleft=parseInt(gardenparts[i].elemleft)+parseInt(garden.elemleft);var modified=[];for(i=0;i<gardenparts.length;i++)gardenparts[i].modified&&(delete gardenparts[i].modified,modified.push(gardenparts[i]));modified.length>0&&GardenpartsService.updateParts({bk:garden.bk,selectedDate:$stateParams.selectedDate},modified)}function save(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.form.gardenForm"),!1;if(vm.garden._id){updateParts();var garden=vm.garden;garden.validFrom=$stateParams.selectedDate;var leankeepers=[],keepers=vm.garden.keepers;console.log("vm.garden.keepers: "+vm.garden.keepers);for(var i=0;i<keepers.length;i++)console.log("garden.keepers[i]"+keepers[i]._id),leankeepers.push(keepers[i]._id);garden.keepers=leankeepers,console.log("garden.keepers"+garden.keepers),$state.$current.data&&"gardens.create"===$state.$current.data.name&&($stateParams.selectedDate=$scope.selectedDate),garden.selectedDate=$stateParams.selectedDate,garden.$update({selectedDate:$stateParams.selectedDate},successCallback,errorCallback)}else vm.garden.validFrom=new Date(0),vm.garden.$save(successCallback,errorCallback)}function successCallback(res){"createGarden"===$state.current.name?$state.go("designGarden",{gardenId:res._id,selectedDate:vm.selectedDate}):$state.go("viewGarden",{bk:$stateParams.bk,selectedDate:$stateParams.selectedDate})}function errorCallback(res){vm.error=res.data.message}var vm=this;if(vm.garden=garden,vm.authentication=Authentication,vm.selectedDate=$stateParams.selectedDate,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,$scope.setDate=function(date){vm.selectedDate=date},("editGarden"===$state.current.name||"createGarden"===$state.current.name)&&(vm.rulesets=RuleSetsService.query()),"editGarden"===$state.current.name&&($scope.updateCoordinates=function(top,left,height,width){var cancel=!1;top!==vm.garden.elemtop&&(angular.forEach(vm.garden.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemtop-(top-vm.garden.elemtop);0>newposition&&(cancel=!0)}),cancel?height=vm.garden.elemheight:(angular.forEach(vm.garden.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemtop-(top-vm.garden.elemtop);gardenpart.elemtop=newposition}),vm.garden.elemtop=top,$scope.minHeight=$scope.initialMinHeight+($scope.initialTop-top))),left===vm.garden.elemleft||cancel||(angular.forEach(vm.garden.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemleft-(left-vm.garden.elemleft);0>newposition&&(cancel=!0)}),cancel?width=vm.garden.elemwidth:(angular.forEach(vm.garden.gardenparts,function(gardenpart,key){var newposition=gardenpart.elemleft-(left-vm.garden.elemleft);gardenpart.elemleft=newposition}),vm.garden.elemleft=left,$scope.minWidth=$scope.initialMinWidth+($scope.initialLeft-left))),vm.garden.elemwidth=width,vm.garden.elemheight=height;var opp=height*width/1e4;return $scope.tooltiptext="breedte: "+height+" cm<br />lengte: "+width+" cm<br />oppervlakte: "+opp+" m²<br /> ± "+Math.round(opp/15)+" personen",cancel}),"createGarden"===$state.current.name){var today=new Date;vm.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2),vm.garden.ruleset="5688553504e0daf62b4b8906",console.log("vm.selectedDate"+vm.selectedDate),$scope.updateCoordinates=function(top,left,height,width){vm.garden.elemtop=top,vm.garden.elemleft=left,vm.garden.elemwidth=width,vm.garden.elemheight=height;var opp=Math.round(height*width/1e4);$scope.tooltiptext="breedte: "+height+" cm lengte: "+width+" cm oppervlakte: "+opp+" m² ± "+Math.round(height*width/15e4)+" personen"}}$scope.addKeeper=function(){vm.error="",vm.newkeeper===vm.authentication.user.username?vm.error="You don't need to add yourself":Users.get({name:vm.newkeeper}).$promise.then(function(user){vm.garden.keepers||(vm.garden.keepers=[]),vm.garden.keepers.push(user),vm.newkeeper=""},function(errorResponse){vm.error=errorResponse.data.message})},$scope.back=function(){console.log("back!"+JSON.stringify($state.previous)),$state.go($state.previous.state.name,$state.previous.params)}}angular.module("gardens").controller("GardensNgController",GardensNgController),GardensNgController.$inject=["$scope","$state","gardenResolve","Authentication","$stateParams","GardenpartsService","Users","RuleSetsService"]}();
!function(){"use strict";function PlantGardenController($scope,$state,garden,Authentication,$stateParams,GardenpartsService,RuleSetsService){function cropgroupByCrop(crop){var cropgroup=!1;loop:for(var c=0;c<garden.ruleset.cropgroups.length;c++)for(var crops=garden.ruleset.cropgroups[c].crops,d=0;d<crops.length;d++)if(crops[d]._id===crop){cropgroup=garden.ruleset.cropgroups[c]._id;break loop}return cropgroup}function successCallback(res){var crop=garden.plantVariety.crop,cropgroup=cropgroupByCrop(crop);console.log("calculating the advice! crop: "+crop+" cropgroup: "+cropgroup);for(var pp=garden.pastplantings,j=0;j<pp.length;j++){var planting=pp[j];planting.elemtop=parseInt(planting.elemtop)-vm.garden.elemtop,planting.elemleft=parseInt(planting.elemleft)-vm.garden.elemleft,planting.cropgroup=cropgroupByCrop(planting.plantVariety.crop),planting.greenlevel=null,planting.redlevel=null;var yearsApart=new Date(new Date(vm.selectedDate)-new Date(planting.validTo)).getFullYear()-1970;if(console.log("years apart: "+yearsApart+" date:"+planting.validTo),planting.opacity=1-yearsApart*yearsApart/36,2>yearsApart&&cropgroup===planting.cropgroup)planting.greenlevel=0,planting.redlevel=255;else for(var rotationrules=vm.garden.ruleset.rotationrules,k=0;k<rotationrules.length;k++)console.log("cropgroup"+cropgroup+"rotationrules[k].cropgroup"+rotationrules[k].cropgroup),console.log("previousCropgroup:"+rotationrules[k].previousCropgroup+" planting.cropgroup: "+planting.cropgroup),cropgroup===rotationrules[k].cropgroup&&rotationrules[k].previousCropgroup===planting.cropgroup&&(console.log("rule applies, checking time"),rotationrules[k].yearsBetween>yearsApart?(planting.greenlevel=0,planting.redlevel=255):(planting.greenlevel=255,planting.redlevel=0))}}function errorCallback(res){vm.error=res.data.message}var vm=this;vm.garden=garden,vm.authentication=Authentication,vm.selectedDate=$stateParams.selectedDate,vm.plant=$stateParams.plant,vm.error=null,vm.form={},$scope.setDate=function(date){vm.selectedDate=date},vm.garden.ruleset=RuleSetsService.get({ruleSetId:garden.ruleset},successCallback,errorCallback)}angular.module("gardens").controller("PlantGardenController",PlantGardenController),PlantGardenController.$inject=["$scope","$state","gardenResolve","Authentication","$stateParams","GardenpartsService","RuleSetsService"]}();
"use strict";angular.module("gardens").controller("ToolboxController",["$scope","$rootScope","GardensService",function($scope,$rootScope,Gardens){$scope.addNewGardenpart=function(tool){$rootScope.$broadcast("addNewGardenpart",tool)};$scope.garden;$scope.toolboxInit=function(){}}]);
"use strict";angular.module("gardens").directive("calendar",["$state","$stateParams",function($state,$stateParams){return{require:"ngModel",link:function(scope,el,attr,ngModel){el.datepicker({changeMonth:!0,changeYear:!0,dateFormat:"yy-mm-dd",onSelect:function(dateText){scope.$apply(function(){ngModel.$setViewValue(dateText),scope.setDate(dateText);var mode=attr.calendar;return"plantGarden"===$state.current.name?(console.log("calendar $state.current.name :"+$state.current.name),void $state.go("plantGarden",{bk:scope.vm.garden.bk,selectedDate:dateText,plant:$stateParams.plant})):void(("view"===mode||"edit"===mode)&&$state.go("viewGarden",{bk:scope.vm.garden.bk,selectedDate:dateText}))})}})}}}]);
"use strict";angular.module("gardens").directive("dragtool",[function(){var draggableConfig={};return{restrict:"A",link:function(scope,elem,attrs){var css={"z-index":"1040",left:window.innerWidth/2,width:"240px"};elem.css(css),elem.draggable(draggableConfig),elem.addClass("col-md-2 panel panel-default dragtool"),elem.prepend('            <div class="panel-heading glyphicon glyphicon-move" style="width: 100%">'+attrs.dragtool+"</div>")}}}]);
"use strict";angular.module("gardens").directive("garden",["$state",function($state){var resizableConfig={grid:[5,5],handles:"all",containment:"parent"},draggableConfig={animate:!0,grid:[5,5],containment:"parent"};return{restrict:"A",link:function(scope,elem,attrs){scope.$on("updatedZoom",function(event,zoom){console.log("gardenDirective received zoom "+zoom),scope.vm.zoom=zoom});attrs.garden;if("createGarden"===$state.current.name)elem.addClass("creategarden"),elem.draggable(draggableConfig),scope.updateCoordinates(50,50,250,350),elem.on("drag",function(evt,ui){scope.updateCoordinates(ui.position.top,ui.position.left,elem.height(),elem.width()),scope.$apply()});else{var topmin=Number.MAX_VALUE,offsettop=Number.MIN_VALUE,leftmin=Number.MAX_VALUE,offsetleft=Number.MIN_VALUE;angular.forEach(scope.vm.garden.gardenparts,function(gardenpart,key){topmin>gardenpart.elemtop&&(topmin=gardenpart.elemtop),leftmin>gardenpart.elemleft&&(leftmin=gardenpart.elemleft);var partoffsettop=gardenpart.elemtop+gardenpart.elemheight;partoffsettop>offsettop&&(offsettop=partoffsettop);var partoffsetleft=gardenpart.elemleft+gardenpart.elemwidth;partoffsetleft>offsetleft&&(offsetleft=partoffsetleft)}),scope.minHeight=offsettop-topmin,scope.minWidth=offsetleft-leftmin,scope.initialMinHeight=offsettop-topmin,scope.initialMinWidth=offsetleft-leftmin,scope.initialTop=scope.vm.garden.elemtop,scope.initialLeft=scope.vm.garden.elemleft,scope.initialHeight=scope.vm.garden.elemheight,scope.initialWidth=scope.vm.garden.elemwidth,resizableConfig.minHeight=scope.minHeight,resizableConfig.minWidth=scope.minWidth}elem.resizable(resizableConfig),elem.on("resize",function(evt,ui){scope.updateCoordinates(ui.position.top,ui.position.left,ui.size.height,ui.size.width);"createGarden"!==$state.current.name&&(elem.resizable("option","minHeight",scope.minHeight),elem.resizable("option","minWidth",scope.minWidth),ui.size.height=scope.vm.garden.elemheight,ui.position.top=scope.vm.garden.elemtop,ui.size.width=scope.vm.garden.elemwidth,ui.position.left=scope.vm.garden.elemleft),scope.$apply()})}}}]);
"use strict";var getCoordinates=function(elem){var el=$(elem),co={};return co.top=el.css("top").replace("px",""),co.left=el.css("left").replace("px",""),co.height=el.css("height").replace("px",""),co.width=el.css("width").replace("px",""),co};angular.module("gardens").directive("gardenpart",["$timeout",function($timeout){return{restrict:"A",link:function(scope,elem,attrs){scope.popoverEvent=function(){$timeout(function(){console.log("popoverevent"),elem.trigger("customEvent")},0)};var updateCoordinates=function(){var co=getCoordinates(elem);scope.update(co.top,co.left,co.width,co.height),scope.$apply()},resizeStop=function(){scope.gardenpart.modified=!0,console.log("modified:"+JSON.stringify(scope.gardenpart)),updateCoordinates()};if(elem.addClass(scope.gardenpart.type),"layout"===attrs.gardenpart){var resizableConfig={containment:"#garden",autoHide:!1,snap:!0,snapmode:"outer",stop:resizeStop,resize:updateCoordinates};switch(scope.gardenpart.type){case"hweg":resizableConfig.minHeight=25,resizableConfig.maxHeight=60,resizableConfig.handles="n,s,e,w";break;case"vweg":resizableConfig.minWidth=25,resizableConfig.maxWidth=60,resizableConfig.handles="n,s,e,w";break;case"akke":resizableConfig.minHeight=50,resizableConfig.minWidth=50,resizableConfig.handles="n,s,e,w";break;case"vbed":resizableConfig.minWidth=60,resizableConfig.maxWidth=120,resizableConfig.handles="n,s,e,w";break;case"hbed":resizableConfig.minHeight=60,resizableConfig.maxHeight=120,resizableConfig.handles="n,s,w,e";break;default:console.log("you shouldnt get here default case in switch gardenpart directive"+JSON.stringify(scope.gardenpart))}if(elem.resizable(resizableConfig),elem.droppable(),"undefined"==typeof scope.gardenpart.bk){switch(scope.gardenpart.type){case"hweg":scope.update(0,0,150,30);break;case"vweg":scope.update(0,0,30,150);break;case"akke":scope.update(0,0,50,50);break;case"vbed":scope.update(0,0,100,200);break;case"hbed":scope.update(0,0,200,100);break;default:console.log("you shouldnt get here default case in switch gardenpart directive"+JSON.stringify(scope.gardenpart))}var draggableConfig={animate:!0,grid:[1,1],containment:"parent",revert:"valid",snap:".gardenpart ",snapmode:"outer"};draggableConfig.drag=updateCoordinates,elem.draggable(draggableConfig),elem.effect("pulsate",function(){scope.opacity=1})}}}}}]);
"use strict";angular.module("gardens").directive("myenter",[function(){return{restrict:"A",link:function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.addKeeper()}),event.preventDefault())})}}}]);
"use strict";angular.module("gardens").directive("rulers",["$timeout","$window",function($timeout,$window){return{template:'<div class="ruler corner"></div><div class="ruler vRule1" ><div ng-repeat="vbox in vboxes" class="vRuleBox">{{vbox}}</div></div><div class="ruler vRule" ></div><div class="ruler hRule1" ><div ng-repeat="hbox in hboxes" class="hRuleBox">{{hbox}}</div></div><div class="ruler hRule"/>',restrict:"E",link:function(scope,element,attrs){var parent=element.parent(),render=function(zoom){"undefined"==typeof zoom&&(zoom=1),parent.height($window.innerHeight),scope.hboxes=[],scope.vboxes=[],$timeout(function(){scope.nrhbox=$window.innerWidth/50,scope.nrvbox=$window.innerHeight/50;for(var i=0;i<scope.nrhbox;i++)scope.hboxes.push(Math.round(50*i/zoom));for(i=0;i<scope.nrvbox;i++)scope.vboxes.push(Math.round(50*i/zoom));parent.css("background",'url("/modules/gardens/client/img/il-grid-trans.png") repeat scroll left top #fff')})};scope.$on("$destroy",function(event){console.log("destroying the background from rulers destroy"+event),parent.css("background","")}),render(),scope.$on("updatedZoom",function(event,zoom){render(zoom)})}}}]);
"use strict";angular.module("gardens").directive("toolbox",[function(){return{restrict:"A",link:function(scope,elem,attrs){var toolClicked=function(tool){return function(){scope.$apply(function(){scope.addNewGardenpart(tool)})}};elem.draggable();var hweg=$("#hweg").addClass("ui-toolbox-hweg ui-widget-content ");hweg.name="hweg",hweg.bind("click",toolClicked(hweg));var vweg=$("#vweg").addClass("ui-toolbox-vweg ui-widget-content ");vweg.name="vweg",vweg.bind("click",toolClicked(vweg));var hbed=$("#hbed").addClass("ui-toolbox-hbed ui-widget-content ");hbed.name="hbed",hbed.bind("click",toolClicked(hbed));var vbed=$("#vbed").addClass("ui-toolbox-vbed ui-widget-content ");vbed.name="vbed",vbed.bind("click",toolClicked(vbed));var akke=$("#akke").addClass("ui-toolbox-akke ui-widget-content ");akke.name="akke",akke.bind("click",toolClicked(akke))}}}]);
"use strict";angular.module("gardens").factory("Gardendata",[function(){var garden,error;return{setGarden:function(arg){garden=arg},getGarden:function(){return garden},setError:function(arg){error=arg},getError:function(){return error}}}]);
!function(){"use strict";function GardenpartsService($resource,$stateParams){return $resource("api/gardenparts/:bk/:selectedDate",{bk:"@bk",selectedDate:$stateParams.selectedDate},{createParts:{method:"PUT",isArray:!0},updateParts:{method:"POST",isArray:!0},deleteParts:{method:"POST",url:"api/gardenparts/delete/:bk/:selectedDate",isArray:!0}})}angular.module("gardens.services").factory("GardenpartsService",GardenpartsService),GardenpartsService.$inject=["$resource","$stateParams"]}();
!function(){"use strict";function GardensService($resource,$stateParams){return $resource("api/gardens/:bk/:selectedDate/:plant",{bk:"@bk",selectedDate:$stateParams.selectedDate,plant:$stateParams.plant},{update:{method:"PUT"},getPlantGardens:{url:"/api/gardens/plant/:selectedDate/:plant",method:"GET",isArray:!0}})}angular.module("gardens.services").factory("GardensService",GardensService),GardensService.$inject=["$resource","$stateParams"]}();
"use strict";angular.module("gardens").factory("Gardenversions",["$resource","$stateParams",function($resource,$stateParams){if(void 0===$stateParams.selectedDate){var today=new Date;$stateParams.selectedDate=today.getFullYear()+"-"+(today.getMonth()+1)+"-"+today.getDate()}return console.log("gardenversions service statedate: "+$stateParams.selectedDate),$resource("/api/gardenversions/:gardenId/:selectedDate",{gardenId:"@_id",selectedDate:"@selectedDate"},{update:{method:"PUT"}})}]);
!function(){"use strict";angular.module("harvests")}();
"use strict";angular.module("harvests").config(["$stateProvider",function($stateProvider){$stateProvider.state("listHarvests",{url:"/harvests",templateUrl:"modules/harvests/views/list-harvests.client.view.html"}).state("createHarvest",{url:"/harvests/create",templateUrl:"modules/harvests/views/create-harvest.client.view.html"}).state("viewHarvest",{url:"/harvests/:harvestId",templateUrl:"modules/harvests/views/view-harvest.client.view.html"}).state("editHarvest",{url:"/harvests/:harvestId/edit",templateUrl:"modules/harvests/views/edit-harvest.client.view.html"})}]);
"use strict";angular.module("harvests").controller("HarvestsController",["$scope","$uibModalInstance","$stateParams","$location","Authentication","Harvests","planting",function($scope,$uibModalInstance,$stateParams,$location,Authentication,Harvests,planting){$scope.newHarvest=function(){console.log("planting in harvest: "+JSON.stringify(planting)),$scope.planting=planting,$scope.harvest={},$scope.harvest.issues=[],$scope.harvest.gotchas=[],$scope.newIssue(),$scope.newGotcha()},$scope.newIssue=function(){var issue={};issue.plantvariety=planting.plantVariety,$scope.harvest.issues.push(issue)},$scope.newGotcha=function(){var gotcha={};gotcha.plantvariety=planting.plantVariety,$scope.harvest.gotchas.push(gotcha)},$scope.authentication=Authentication,$scope.create=function(){console.log("plantvarid: "+planting.plantVariety._id),planting.validTo=$stateParams.selectedDate;for(var har=$scope.harvest,i=0;i<har.issues.length;i++)har.issues[i].plantvariety=har.issues[i].plantvariety._id;for(i=0;i<har.gotchas.length;i++)har.gotchas[i].plantvariety=har.gotchas[i].plantvariety._id;var harvest=new Harvests({garden:planting.garden,planting:planting._id,quantity:har.quantity,unit:har.unit,issues:har.issues,gotchas:har.gotchas,date:$stateParams.selectedDate});$uibModalInstance.close(harvest)},$scope.remove=function(harvest){if(harvest){harvest.$remove();for(var i in $scope.harvests)$scope.harvests[i]===harvest&&$scope.harvests.splice(i,1)}else $scope.harvest.$remove(function(){$location.path("harvests")})},$scope.update=function(){var harvest=$scope.harvest;harvest.$update(function(){$location.path("harvests/"+harvest._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.harvests=Harvests.query()},$scope.findOne=function(){$scope.harvest=Harvests.get({harvestId:$stateParams.harvestId})}}]);
"use strict";angular.module("harvests").factory("Harvests",["$resource",function($resource){return $resource("api/harvests/:harvestId",{harvestId:"@_id"},{update:{method:"PUT"}})}]);
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Plant families",state:"plantfamilies",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","plantfamilies",{title:"List plant families",state:"plantfamilies.list"}),Menus.addSubMenuItem("topbar","plantfamilies",{title:"Create plant family",state:"plantfamilies.create",roles:["user"]})}angular.module("plantfamilies").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("plantfamilies",{"abstract":!0,url:"/plantfamilies",template:"<ui-view/>"}).state("plantfamilies.list",{url:"",templateUrl:"modules/plant-families/client/views/list-plant-families.client.view.html",controller:"PlantFamiliesListController",controllerAs:"vm",data:{pageTitle:"Plant families list"}}).state("plantfamilies.create",{url:"/create",templateUrl:"modules/plant-families/client/views/form-plant-family.client.view.html",controller:"PlantFamiliesController",controllerAs:"vm",resolve:{plantFamilyResolve:newPlantFamily},data:{roles:["user","admin"],pageTitle:"Add plant family"}}).state("plantfamilies.edit",{url:"/:plantFamilyId/edit",templateUrl:"modules/plant-families/client/views/form-plant-family.client.view.html",controller:"PlantFamiliesController",controllerAs:"vm",resolve:{plantFamilyResolve:getPlantFamily},data:{roles:["user","admin"],pageTitle:"Edit plant family {{ plantFamilyResolve.name }}"}}).state("plantfamilies.view",{url:"/:plantFamilyId",templateUrl:"modules/plant-families/client/views/view-plant-family.client.view.html",controller:"PlantFamiliesController",controllerAs:"vm",resolve:{plantFamilyResolve:getPlantFamily},data:{pageTitle:"Plant family {{ plantFamilyResolve.name }}"}})}function getPlantFamily($stateParams,PlantFamilyService){return PlantFamilyService.get({plantFamilyId:$stateParams.plantFamilyId}).$promise}function newPlantFamily(PlantFamilyService){return new PlantFamilyService}angular.module("plantfamilies.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getPlantFamily.$inject=["$stateParams","PlantFamilyService"],newPlantFamily.$inject=["PlantFamilyService"]}();
!function(){"use strict";function PlantFamiliesListController(PlantFamilyService){var vm=this;vm.plantfamilies=PlantFamilyService.query()}angular.module("plantfamilies").controller("PlantFamiliesListController",PlantFamiliesListController),PlantFamiliesListController.$inject=["PlantFamilyService"]}();
!function(){"use strict";function PlantFamiliesController($scope,$state,plantfamily,Authentication){function remove(){confirm("Are you sure you want to delete?")&&vm.plantfamily.$remove($state.go("plantfamilies.list"))}function save(isValid){function successCallback(res){$state.go("plantfamilies.view",{plantFamilyId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.plantfamily._id?vm.plantfamily.$update(successCallback,errorCallback):vm.plantfamily.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.plantFamilyForm"),!1)}var vm=this;vm.plantfamily=plantfamily,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("plantfamilies").controller("PlantFamiliesController",PlantFamiliesController),PlantFamiliesController.$inject=["$scope","$state","plantFamilyResolve","Authentication"]}();
!function(){"use strict";function PlantFamilyService($resource){return $resource("api/plant-families/:plantFamilyId",{plantFamilyId:"@_id"},{update:{method:"PUT"}})}angular.module("plantfamilies.services").factory("PlantFamilyService",PlantFamilyService),PlantFamilyService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Plant varieties",state:"plant-varieties",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","plant-varieties",{title:"List plant varieties",state:"plant-varieties.list"}),Menus.addSubMenuItem("topbar","plant-varieties",{title:"Add plant variety",state:"plant-varieties.create",roles:["user"]})}angular.module("plant-varieties").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("plant-varieties",{"abstract":!0,url:"/plant-varieties",template:"<ui-view/>"}).state("plant-varieties.list",{url:"",templateUrl:"modules/plant-varieties/client/views/list-plant-varieties.client.view.html",controller:"PlantVarietiesListController",controllerAs:"vm",data:{pageTitle:"Plant varieties list"}}).state("plant-varieties.create",{url:"/create",templateUrl:"modules/plant-varieties/client/views/form-plant-variety.client.view.html",controller:"PlantVarietiesController",controllerAs:"vm",resolve:{plantVarietyResolve:newPlantVariety},data:{roles:["user","admin"],pageTitle:"Add plant variety"}}).state("plant-varieties.edit",{url:"/:plantVarietyId/edit",templateUrl:"modules/plant-varieties/client/views/form-plant-variety.client.view.html",controller:"PlantVarietiesController",controllerAs:"vm",resolve:{plantVarietyResolve:getPlantVariety},data:{roles:["user","admin"],pageTitle:"Edit plant variety {{ plantVarietyResolve.title }}"}}).state("plant-varieties.view",{url:"/:plantVarietyId",templateUrl:"modules/plant-varieties/client/views/view-plant-variety.client.view.html",controller:"PlantVarietiesController",controllerAs:"vm",resolve:{plantVarietyResolve:getPlantVariety},data:{pageTitle:"Plant variety {{ plantVarietyResolve.title }}"}})}function getPlantVariety($stateParams,PlantVarietiesService){return PlantVarietiesService.get({plantVarietyId:$stateParams.plantVarietyId}).$promise}function newPlantVariety(PlantVarietiesService){return new PlantVarietiesService}angular.module("plant-varieties.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getPlantVariety.$inject=["$stateParams","PlantVarietiesService"],newPlantVariety.$inject=["PlantVarietiesService"]}();
!function(){"use strict";function PlantVarietiesListController(PlantVarietiesService){var vm=this;vm.plantvarieties=PlantVarietiesService.query()}angular.module("plant-varieties").controller("PlantVarietiesListController",PlantVarietiesListController),PlantVarietiesListController.$inject=["PlantVarietiesService"]}();
!function(){"use strict";function PlantVarietiesController($scope,$state,$timeout,$window,plantvariety,Authentication,CropsService,FileUploader,Cropper){function showCropper(){$scope.$broadcast($scope.showEvent)}function remove(){confirm("Are you sure you want to delete?")&&vm.plantvariety.$remove($state.go("plant-varieties.list"))}function save(isValid){function successCallback(res){$state.go("plant-varieties.view",{plantVarietyId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.plantvariety._id?vm.plantvariety.$update(successCallback,errorCallback):vm.plantvariety.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.plantvarietyForm"),!1)}var vm=this;if(vm.plantvariety=plantvariety,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.crops=CropsService.query(),"plant-varieties.view"===$state.current.name){var year=(new Date).getFullYear(),date=new Date(year,0);vm.DOYstartSow=new Date(date.setDate(plantvariety.DOYstartSow)),vm.DOYendSow=new Date(date.setDate(plantvariety.DOYendSow));var today=new Date;vm.DOYendSow<today?(console.log("Zaaien is al voorbij vm.DOYendSow: "+vm.DOYendSow+"< today: "+today),vm.selectedDate=vm.DOYstartSow.getFullYear()+1+"-"+("0"+(vm.DOYstartSow.getMonth()+1)).substr(-2)+"-"+("0"+vm.DOYstartSow.getDate()).substr(-2)):vm.DOYstartSow<today?(console.log("Zaaien is al begonnen neem vandaag"),vm.selectedDate=today.getFullYear()+"-"+("0"+(today.getMonth()+1)).substr(-2)+"-"+("0"+today.getDate()).substr(-2)):(console.log(" vm.DOYendSow: "+vm.DOYendSow+">= today: "+today),console.log(" vm.DOYstartSow: "+vm.DOYstartSow+">= today: "+today),console.log("Zaaien is al nog niet begonnen neem dit jaar zaaiperiode start"),vm.selectedDate=vm.DOYstartSow.getFullYear()+"-"+("0"+(vm.DOYstartSow.getMonth()+1)).substr(-2)+"-"+("0"+vm.DOYstartSow.getDate()).substr(-2))}var file,data;$scope.options={maximize:!0,aspectRatio:1,crop:function(dataNew){data=dataNew,$scope.scale(128)}},$scope.preview=function(){file&&data&&Cropper.crop(file,data).then(Cropper.encode).then(function(dataUrl){(vm.plantvariety||(vm.plantvariety={})).image=dataUrl})},$scope.scale=function(width){Cropper.crop(file,data).then(function(blob){return Cropper.scale(blob,{width:width})}).then(Cropper.encode).then(function(dataUrl){(vm.plantvariety||(vm.plantvariety={})).image=dataUrl})},$scope.showEvent="show",$scope.hideEvent="hide",$scope.uploader=new FileUploader,$scope.uploader.onAfterAddingFile=function(fileItem){Cropper.encode(file=fileItem._file).then(function(dataUrl){$scope.dataUrl=dataUrl,$timeout(showCropper)})}}angular.module("plant-varieties").controller("PlantVarietiesController",PlantVarietiesController),PlantVarietiesController.$inject=["$scope","$state","$timeout","$window","plantVarietyResolve","Authentication","CropsService","FileUploader","Cropper"]}();
"use strict";angular.module("plant-varieties").directive("doypicker",[function(){return{require:"ngModel",link:function(scope,el,attr,ngModel){$(el).datepicker({dateFormat:"o"})}}}]);
!function(){"use strict";function PlantVarietiesService($resource){return $resource("api/plant-varieties/:plantVarietyId",{plantVarietyId:"@_id"},{update:{method:"PUT"}})}angular.module("plant-varieties.services").factory("PlantVarietiesService",PlantVarietiesService),PlantVarietiesService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Rule sets",state:"rulesets",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","rulesets",{title:"List rule sets",state:"rulesets.list"}),Menus.addSubMenuItem("topbar","rulesets",{title:"Create rule set",state:"rulesets.create",roles:["user"]})}angular.module("rule-sets").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("rulesets",{"abstract":!0,url:"/rulesets",template:"<ui-view/>"}).state("rulesets.list",{url:"",templateUrl:"modules/rule-sets/client/views/list-rule-sets.client.view.html",controller:"RuleSetsListController",controllerAs:"vm",data:{pageTitle:"Rule sets list"}}).state("rulesets.create",{url:"/create",templateUrl:"modules/rule-sets/client/views/form-rule-set.client.view.html",controller:"RuleSetsController",controllerAs:"vm",resolve:{ruleSetResolve:newRuleset},data:{roles:["user","admin"]}}).state("rulesets.edit",{url:"/:ruleSetId/edit",templateUrl:"modules/rule-sets/client/views/form-rule-set.client.view.html",controller:"RuleSetsController",controllerAs:"vm",resolve:{ruleSetResolve:getRuleSet},data:{roles:["user","admin"],pageTitle:"Edit Rule set {{ ruleSetResolve.name }}"}}).state("rulesets.view",{url:"/:ruleSetId",templateUrl:"modules/rule-sets/client/views/view-rule-set.client.view.html",controller:"RuleSetsController",controllerAs:"vm",resolve:{ruleSetResolve:getRuleSet},data:{pageTitle:"Rule set {{ ruleSetResolve.name }}"}})}function getRuleSet($stateParams,RuleSetsService){return RuleSetsService.get({ruleSetId:$stateParams.ruleSetId}).$promise}function newRuleset(RuleSetsService){return new RuleSetsService}angular.module("rule-sets.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getRuleSet.$inject=["$stateParams","RuleSetsService"],newRuleset.$inject=["RuleSetsService"]}();
!function(){"use strict";function RuleSetsListController(RuleSetsService){var vm=this;vm.rulesets=RuleSetsService.query()}angular.module("rule-sets").controller("RuleSetsListController",RuleSetsListController),RuleSetsListController.$inject=["RuleSetsService"]}();
!function(){"use strict";function RuleSetsController($scope,$state,ruleset,Authentication,Crops){function newCropgroup(name){var cropgroup={};return cropgroup.name=void 0===name?"Geef de groep een naam":name,cropgroup.crops=[],vm.ruleset.cropgroups.push(cropgroup),cropgroup}function newRule(){var rule={};vm.ruleset.rotationrules.push(rule)}function remove(){confirm("Are you sure you want to delete?")&&vm.ruleset.$remove($state.go("rulesets.list"))}function save(isValid){function successCallback(res){$state.go("rulesets.view",{ruleSetId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.ruleset._id?vm.ruleset.$update(successCallback,errorCallback):vm.ruleset.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.rulesetForm"),!1)}var vm=this;vm.ruleset=ruleset,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,ruleset._id||(console.log("nieuwe ruleset"),vm.ruleset.cropgroups=[],vm.ruleset.rotationrules=[],newRule(),vm.crops=Crops.query(),vm.crops.$promise.then(function(crops){loop:for(var i=0;i<crops.length;i++){for(var j=0;j<vm.ruleset.cropgroups.length;j++)if(vm.ruleset.cropgroups[j].name===crops[i].plantfamily.name){vm.ruleset.cropgroups[j].crops.push(crops[i]);continue loop}var cropgroup=newCropgroup(crops[i].plantfamily.name);cropgroup.crops.push(crops[i])}})),$scope.newCropgroup=newCropgroup,$scope.newRule=newRule}angular.module("rule-sets").controller("RuleSetsController",RuleSetsController),RuleSetsController.$inject=["$scope","$state","ruleSetResolve","Authentication","CropsService"]}();
"use strict";angular.module("rule-sets").directive("toNumber",function(){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$parsers.push(function(val){return parseInt(val,10)}),ngModel.$formatters.push(function(val){return""+val})}}});
"use strict";angular.module("rule-sets.services").factory("RuleSetsService",["$resource",function($resource){return $resource("api/rule-sets/:ruleSetId",{ruleSetId:"@_id"},{update:{method:"PUT"}})}]);
"use strict";angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]);
"use strict";angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController",data:{pageTitle:"Users List"}}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]},data:{pageTitle:"Edit {{ userResolve.displayName }}"}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]},data:{pageTitle:"Edit User {{ userResolve.displayName }}"}})}]);
"use strict";angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html",data:{pageTitle:"Settings"}}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html",data:{pageTitle:"Settings password"}}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html",data:{pageTitle:"Settings accounts"}}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html",data:{pageTitle:"Settings picture"}}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html",data:{pageTitle:"Signup"}}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html",data:{pageTitle:"Signin"}}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html",data:{pageTitle:"Password forgot"}}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html",data:{pageTitle:"Password reset invalid"}}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html",data:{pageTitle:"Password reset success"}}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html",data:{pageTitle:"Password reset form"}})}]);
"use strict";angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]);
"use strict";angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]);
"use strict";angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]);
"use strict";angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]);
"use strict";angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}});
"use strict";angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]);
"use strict";angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with 10 or more characters, numbers, lowercase, uppercase, and special characters.";return popoverMsg}}}]);
"use strict";angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"},get:{url:"users/id/:name"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);
"use strict";angular.module("core").factory("authInterceptor",["$q","$injector","Authentication",function($q,$injector,Authentication){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]);
"use strict";angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]);
"use strict";angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]);
"use strict";angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]);
"use strict";angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]);
"use strict";angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]);
"use strict";angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]);
"use strict";angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]);